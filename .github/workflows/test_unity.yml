name: Unity Test

on:
  pull_request:
    paths:
      - 'one-mobile/flutter-project/**'
      - 'one-unity/**'

env:
  BUILD_ENV: dev
  UNITY_ROOT: one-unity/unity-project/development/complete-unity
  S3_CACHE_BUCKET: xrspace-ci-runner-cache
  EXPOSED_FLUTTER_UNITY_WIDGET: exposed_flutter_unity_widget
  LICENSE_LAMBDA_FUNCNAME: license-server

jobs:
  UnityTesting:
    name: Test Unity on ${{ matrix.targetPlatform }}
    timeout-minutes: 100  # timeout: 100min

    runs-on: ["self-hosted", "t3-xlarge"]

    strategy:
      fail-fast: false
      matrix:
        targetPlatform:
          - StandaloneLinux64

    steps:
      - uses: actions/checkout@v3

      # Setup
      # ==================================================
      - name: invoke lambda (acquire license)
        id: acquire_license
        uses: ./one-utility/actions/acquire_license
        with:
          LAMBDA_FUNCNAME: ${{ env.LICENSE_LAMBDA_FUNCNAME }}
      - uses: ./one-utility/actions/game_ci_setup
        id: game_ci_setup_action
        with:
          aws_s3_cache_bucket: ${{ env.S3_CACHE_BUCKET }}
          aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          github_ssh_key: ${{ secrets.INTERNAL_GITHUB_SSH_PRIVATE_KEY }}
          unity_platform: ${{ matrix.targetPlatform }}
          unity_root: ${{ env.UNITY_ROOT }}
          target_env: ${{ env.BUILD_ENV }}

      - uses: game-ci/unity-test-runner@v2
        env:
          UNITY_EMAIL: ${{ steps.acquire_license.outputs.email }}
          UNITY_PASSWORD: ${{ steps.acquire_license.outputs.password }}
          UNITY_SERIAL: ${{ steps.acquire_license.outputs.serial }}
        with:
          sshAgent: ${{ env.SSH_AUTH_SOCK }}
          targetPlatform: ${{ matrix.targetPlatform }}
          projectPath: ${{ env.UNITY_ROOT }}
          chownFilesTo: "${{ steps.game_ci_setup_action.outputs.uid }}:${{ steps.game_ci_setup_action.outputs.gid }}"
          customImage: ${{ steps.game_ci_setup_action.outputs.image }}

      # Teardown
      # ==================================================
      - name: invoke lambda (revoke license)
        if: ${{ always() }}
        uses: ./one-utility/actions/revoke_license
        with:
          LAMBDA_FUNCNAME: license-server
          LICENSE_UUID: ${{ steps.acquire_license.outputs.uuid }}

  UnityBuild:
    name: Test Unity on StandaloneWindows64
    timeout-minutes: 90

    runs-on: ["self-hosted", "t3-xlarge"]

    steps:
      - uses: actions/checkout@v3

      # Setup
      # ==================================================
      - name: invoke lambda (acquire license)
        id: acquire_license
        uses: ./one-utility/actions/acquire_license
        with:
          LAMBDA_FUNCNAME: ${{ env.LICENSE_LAMBDA_FUNCNAME }}
      - uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-1
      - uses: ./one-utility/actions/game_ci_setup
        id: game_ci_setup_action
        with:
          aws_s3_cache_bucket: ${{ env.S3_CACHE_BUCKET }}
          aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          github_ssh_key: ${{ secrets.INTERNAL_GITHUB_SSH_PRIVATE_KEY }}
          unity_platform: StandaloneWindows64
          unity_root: ${{ env.UNITY_ROOT }}
          target_env: ${{ env.BUILD_ENV }}

      - uses: game-ci/unity-builder@v2
        env:
          UNITY_EMAIL: ${{ steps.acquire_license.outputs.email }}
          UNITY_PASSWORD: ${{ steps.acquire_license.outputs.password }}
          UNITY_SERIAL: ${{ steps.acquire_license.outputs.serial }}
        with:
          sshAgent: ${{ env.SSH_AUTH_SOCK }}
          targetPlatform: StandaloneWindows64
          projectPath: ${{ env.UNITY_ROOT }}
          chownFilesTo: "${{ steps.game_ci_setup_action.outputs.uid }}:${{ steps.game_ci_setup_action.outputs.gid }}"
          buildMethod: ${{ steps.game_ci_setup_action.outputs.unity_build_method }}
          customImage: ${{ steps.game_ci_setup_action.outputs.image }}
          allowDirtyBuild: ${{ steps.game_ci_setup_action.outputs.allowDirtyBuild }}

      # Teardown
      # ==================================================
      - name: invoke lambda (revoke license)
        if: ${{ always() }}
        uses: ./one-utility/actions/revoke_license
        with:
          LAMBDA_FUNCNAME: license-server
          LICENSE_UUID: ${{ steps.acquire_license.outputs.uuid }}
