name: Build Unity Artifact (iOS)

on:
  workflow_dispatch:
    inputs:
      BUILD_ENV:
        description: 'The target build environment'
        required: true
        type: choice
        default: dev
        options:
          - dev
          - qa
          - prod
  workflow_call:
    inputs:
      TARGET_BRANCH:
        description: "The target branch"
        default: ""
        type: string
      BUNDLE_ID:
        description: "The iOS bundle ID"
        default: "com.xrspace.tpfive.dev"
        type: string


env:
  BUILD_ENV: ${{ inputs.BUILD_ENV || 'dev' }}
  UNITY_ROOT: one-unity/unity-project/development/complete-unity
  S3_CACHE_BUCKET: xrspace-ci-runner-cache
  S3_ARTIFACT_BUCKET: one-app-develop-s3-cms
  LICENSE_LAMBDA_FUNCNAME: license-server
  EXPOSED_FLUTTER_UNITY_WIDGET: exposed_flutter_unity_widget

jobs:
  UnityBuildIOS:
    name: Build for ${{ matrix.targetPlatform }}

    timeout-minutes: 120  # timeout: 2 hour
    runs-on: ["self-hosted", "t3-xlarge"]

    strategy:
      fail-fast: false
      matrix:
        targetPlatform:
          - iOS

    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ inputs.TARGET_BRANCH || '' }}

      # Setup
      # ==================================================
      - name: Setup the global environment
        run: |
          echo "TZ=Asia/Taipei" >> "$GITHUB_ENV"
      - name: invoke lambda (acquire license)
        id: acquire_license
        uses: ./one-utility/actions/acquire_license
        with:
          LAMBDA_FUNCNAME: ${{ env.LICENSE_LAMBDA_FUNCNAME }}
      - uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-1
      - uses: ./one-utility/actions/game_ci_setup
        id: game_ci_setup_action
        with:
          aws_s3_cache_bucket: ${{ env.S3_CACHE_BUCKET }}
          aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          github_ssh_key: ${{ secrets.INTERNAL_GITHUB_SSH_PRIVATE_KEY }}
          unity_platform: ${{ matrix.targetPlatform }}
          unity_root: ${{ env.UNITY_ROOT }}
          target_env: ${{ env.BUILD_ENV }}

      - name: Change the bundle ID
        run: |
          if [[ "${GITHUB_REF##*/}" == "pre-release" || "${GITHUB_REF##*/}" == "main" ]]; then
            one-utility/change_unity_bundle_id.sh dev
          else
            one-utility/change_unity_bundle_id.sh unknown
          fi

      - uses: game-ci/unity-builder@v2
        env:
          UNITY_EMAIL: ${{ steps.acquire_license.outputs.email }}
          UNITY_PASSWORD: ${{ steps.acquire_license.outputs.password }}
          UNITY_SERIAL: ${{ steps.acquire_license.outputs.serial }}
        with:
          sshAgent: ${{ env.SSH_AUTH_SOCK }}
          targetPlatform: ${{ matrix.targetPlatform }}
          projectPath: ${{ env.UNITY_ROOT }}
          chownFilesTo: "${{ steps.game_ci_setup_action.outputs.uid }}:${{ steps.game_ci_setup_action.outputs.gid }}"
          buildMethod: ${{ steps.game_ci_setup_action.outputs.unity_build_method }}
          allowDirtyBuild: ${{ steps.game_ci_setup_action.outputs.allowDirtyBuild }}
          customImage: ${{ steps.game_ci_setup_action.outputs.image }}

      # Teardown
      # ==================================================
      - name: invoke lambda (revoke license)
        if: ${{ always() }}
        uses: ./one-utility/actions/revoke_license
        with:
          LAMBDA_FUNCNAME: ${{ env.LICENSE_LAMBDA_FUNCNAME }}
          LICENSE_UUID: ${{ steps.acquire_license.outputs.uuid }}

      # Build the iOS artifact and upload the artifact of export flutter-unity-widget
      # ==================================================
      - uses: jakejarvis/s3-sync-action@master
        env:
          AWS_S3_BUCKET: ${{ env.S3_CACHE_BUCKET }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          SOURCE_DIR: one-unity/unity-project/development/complete-unity/${{ env.EXPOSED_FLUTTER_UNITY_WIDGET }}
          DEST_DIR: ${{ github.repository }}/${{ matrix.targetPlatform }}/${{ env.EXPOSED_FLUTTER_UNITY_WIDGET }}/${{ github.sha }}

  FastlaneBuildIOS:
    name: Build for iOS and upload to TestFlight
    timeout-minutes: 90  # timeout: 1.5 hour

    runs-on: macos-13
    needs:
      - UnityBuildIOS

    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ inputs.TARGET_BRANCH || '' }}
          ssh-key: ${{ secrets.INTERNAL_GITHUB_SSH_PRIVATE_KEY }}

      # Setup
      # ==================================================
      - uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.13.9'
      - uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - name: Change default Xcode
        run: |
          sudo xcode-select -s /Applications/Xcode_15.0.1.app

      # Setup - the .env file
      # ==================================================
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-1
      - name: decrypt_env.sh
        run: |
          brew install sops
          one-utility/decrypt_env.sh ${{ env.BUILD_ENV }}

      # Setup - install fastlane
      # ==================================================
      - uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2' # Not needed with a .ruby-version file
          bundler-cache: true # runs 'bundle install' and caches installed gems automatically
      - name: Install fastlane
        run: |
          pushd "one-mobile/flutter_project/ios" || exit 1

          gem install fastlane
          bundle update

      # Setup - get the UnityFramework
      # ==================================================
      - name: Sync ios/UnityLibrary
        env:
          AWS_S3_BUCKET: ${{ env.S3_CACHE_BUCKET }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

          SRC: ${{ github.repository }}/iOS/${{ env.EXPOSED_FLUTTER_UNITY_WIDGET }}/${{ github.sha }}
          DST: one-unity/unity-project/development/complete-unity/${{ env.EXPOSED_FLUTTER_UNITY_WIDGET }}
        run: |
          mkdir -p "${{ env.DST }}"
          aws s3 cp "s3://${{ env.AWS_S3_BUCKET }}/${{ env.SRC }}/" "${{ env.DST }}/" --recursive --quiet
      - name: Import the framework exported from flutter-unity-widget
        run: |
          ./one-utility/link-unity-frameworks.sh
      - name: Pod install for extenal dependencies
        env:
          EXPORT_DIR: one-unity/unity-project/development/complete-unity/${{ env.EXPOSED_FLUTTER_UNITY_WIDGET }}/ios/UnityLibrary
          WORKSPACE_PATH: one-mobile/flutter_project/ios/Runner.xcworkspace
        run: |
          pushd "${{ env.EXPORT_DIR }}" || exit 1
          echo "workspace '../../../../../../../one-mobile/flutter_project/ios/Runner.xcworkspace'" >> Podfile
          pod install

      # Setup - SSH auth for fastlane/match
      # ==================================================
      - name: Add GitHub to the SSH known hosts file
        shell: bash
        run: |
          mkdir -p "$HOME/.ssh"
          ssh-keyscan github.com > "$HOME/.ssh/known_hosts"
      - uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.INTERNAL_GITHUB_SSH_PRIVATE_KEY }}

      - name: Build iOS and deploy to TestFlight
        id: build_ios_by_fastlane
        env:
          MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
          APP_STORE_CONNECT_API_KEY_KEY: ${{ secrets.APP_STORE_CONNECT_API_KEY_KEY }}
          FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD: ${{ secrets.FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD }}
          IS_CI: true
        run: |
          pushd "one-mobile/flutter_project/ios" || exit 1

          flutter pub get
          pod install
          BUNDLE_ID=${{ inputs.BUNDLE_ID }} bundle exec fastlane release
      - name: Show error log
        if: failure() && steps.build_ios_by_fastlane.outcome == 'failure'
        run: |
          if [ -f /Users/runner/Library/Logs/gym/Runner-Runner.log ]; then
            echo "Build iOS by fastlane failure ..."
            cat /Users/runner/Library/Logs/gym/Runner-Runner.log
          fi
