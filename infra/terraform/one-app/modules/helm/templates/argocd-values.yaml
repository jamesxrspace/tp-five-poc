## Globally shared configuration
global:
  # Default logging options used by all components
  logging:
    # -- Set the global logging format. Either: `text` or `json`
    format: json
    # -- Set the global logging level. One of: `debug`, `info`, `warn` or `error`
    level: info
  # -- Default priority class for all components
  priorityClassName: "system-node-critical"
  # -- Default node selector for all components
  nodeSelector:
    Service: core-component

## Argo Configs
configs:
  # General Argo CD configuration
  ## Ref: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/argocd-cm.yaml
  cm:
    # -- Argo CD's externally facing base URL (optional). Required when configuring SSO
    url: "https://${ARGOCD_HOST}"
    # -- The name of tracking label used by Argo CD for resource pruning
    # @default -- Defaults to app.kubernetes.io/instance
    application.instanceLabelKey: argocd.argoproj.io/instance
    # -- Enable local admin user
    ## Ref: https://argo-cd.readthedocs.io/en/latest/faq/#how-to-disable-admin-user
    admin.enabled: true
    # -- Allow helm-secrets schemes in argocd-cm ConfigMap
    helm.valuesFileSchemes: >-
      secrets+gpg-import, secrets+gpg-import-kubernetes,
      secrets+age-import, secrets+age-import-kubernetes,
      secrets,secrets+literal,
      https
    # Dex configuration
    dex.config: |
      connectors:
        - type: github
          id: github
          name: GitHub
          config:
            clientID: ${CLIENT_ID}
            clientSecret: ${CLIENT_SECRET}
            orgs:
            - name: XRSPACE-Inc

  params:
    # -- Run server without TLS
    server.insecure: true
    applicationsetcontroller.policy: create-delete
    reposerver.parallelism.limit: 10
  rbac:
    policy.default: 'role:readonly'
    policy.csv: |
      p, role:readonly, applications, get, *, allow
      p, role:readonly, projects, get, *, allow
    scopes: "[groups, email]"

## Application controller
controller:
  # -- Resource limits and requests for the application controller pods
  resources:
   limits:
     cpu: 500m
     memory: 512Mi
   requests:
     cpu: 250m
     memory: 256Mi
  ## Application controller metrics configuration
  metrics:
    # -- Deploy metrics service
    enabled: true
    serviceMonitor:
      # -- Enable a prometheus ServiceMonitor
      enabled: true
      # -- Prometheus ServiceMonitor interval
      interval: 30s
      # -- Prometheus ServiceMonitor selector
      selector:
        release: kube-prometheus-stack
      # -- Prometheus ServiceMonitor namespace
      namespace: "monitoring"
    rules:
      # -- Deploy a PrometheusRule for the application controller
      enabled: true
      # -- PrometheusRule namespace
      namespace: "monitoring"
      # -- PrometheusRule selector
      selector:
        release: kube-prometheus-stack
      # -- PrometheusRule.Spec for the application controller
      spec:
        - alert: ArgoAppMissing
          expr: |
            absent(argocd_app_info) == 1
          for: 15m
          labels:
            severity: critical
          annotations:
            summary: "[Argo CD] No reported applications"
            description: >
              Argo CD has not reported any applications data for the past 15 minutes which
              means that it must be down or not functioning properly.  This needs to be
              resolved for this cloud to continue to maintain state.
        - alert: ArgoAppNotSynced
          expr: |
            argocd_app_info{sync_status!="Synced"} == 1
          for: 12h
          labels:
            severity: warning
          annotations:
            summary: "[{{`{{$labels.name}}`}}] Application not synchronized"
            description: >
              The application [{{`{{$labels.name}}`}} has not been synchronized for over
              12 hours which means that the state of this cloud has drifted away from the
              state inside Git.

## Dex
dex:
  # -- Enable dex
  enabled: true
  # -- Dex name
  name: dex-server
  metrics:
    # -- Deploy metrics service
    enabled: true
    serviceMonitor:
      # -- Enable a prometheus ServiceMonitor
      enabled: true
      # -- Prometheus ServiceMonitor interval
      interval: 30s
      selector:
        release: kube-prometheus-stack
      # -- Prometheus ServiceMonitor namespace
      namespace: "monitoring"
  # -- Resource limits and requests for dex
  resources:
   limits:
     cpu: 50m
     memory: 64Mi
   requests:
     cpu: 10m
     memory: 32Mi

# This key configures Redis-HA subchart and when enabled (redis-ha.enabled=true)
# the custom redis deployment is omitted
# Check the redis-ha chart for more properties
redis-ha:
  # -- Enables the Redis HA subchart and disables the custom Redis single node deployment
  enabled: true
  nodeSelector:
    Service: core-component
  ## https://kubernetes.io/docs/concepts/workloads/pods/pod-topology-spread-constraints/
  topologySpreadConstraints:
    # -- Enable Redis HA topology spread constraints
    enabled: true
    # -- Max skew of pods tolerated
    # @default -- `""` (defaults to `1`)
    maxSkew: "1"
    # -- Topology key for spread
    # @default -- `""` (defaults to `topology.kubernetes.io/zone`)
    topologyKey: "kubernetes.io/hostname"
    # -- Enforcement policy, hard or soft
    # @default -- `""` (defaults to `ScheduleAnyway`)
    whenUnsatisfiable: "DoNotSchedule"

## Server
server:
  # -- The number of server pods to run
  replicas: 2
  # -- Resource limits and requests for the Argo CD server
  resources:
   limits:
     cpu: 100m
     memory: 128Mi
   requests:
     cpu: 50m
     memory: 64Mi
  ## Server metrics service configuration
  metrics:
    # -- Deploy metrics service
    enabled: true
    serviceMonitor:
      # -- Enable a prometheus ServiceMonitor
      enabled: true
      # -- Prometheus ServiceMonitor selector
      selector:
        release: kube-prometheus-stack
      # -- Prometheus ServiceMonitor namespace
      namespace: "monitoring"

## Repo Server
repoServer:
  # -- The number of repo server pods to run
  replicas: 2
  # -- Environment variables to pass to repo server
  env:
    - name: HELM_PLUGINS
      value: /custom-tools/helm-plugins/
    - name: HELM_SECRETS_CURL_PATH
      value: /custom-tools/curl
    - name: HELM_SECRETS_SOPS_PATH
      value: /custom-tools/sops
    - name: HELM_SECRETS_VALS_PATH
      value: /custom-tools/vals
    - name: HELM_SECRETS_KUBECTL_PATH
      value: /custom-tools/kubectl
    - name: HELM_SECRETS_BACKEND
      value: sops
    # https://github.com/jkroepke/helm-secrets/wiki/Security-in-shared-environments
    - name: HELM_SECRETS_VALUES_ALLOW_SYMLINKS
      value: "false"
    - name: HELM_SECRETS_VALUES_ALLOW_ABSOLUTE_PATH
      value: "true"
    - name: HELM_SECRETS_VALUES_ALLOW_PATH_TRAVERSAL
      value: "false"
    - name: HELM_SECRETS_WRAPPER_ENABLED
      value: "true"
    - name: HELM_SECRETS_DECRYPT_SECRETS_IN_TMP_DIR
      value: "true"
    - name: HELM_SECRETS_HELM_PATH
      value: /usr/local/bin/helm
    - name: ARGOCD_EXEC_TIMEOUT
      value: 10m


  # -- Init containers to add to the repo server pods
  initContainers:
    - name: download-tools
      image: alpine:latest
      imagePullPolicy: IfNotPresent
      command: [sh, -ec]
      env:
        - name: HELM_SECRETS_VERSION
          value: ${HELM_SECRETS_VERSION}
        - name: KUBECTL_VERSION
          value: ${KUBECTL_VERSION}
        - name: VALS_VERSION
          value: ${VALS_VERSION}
        - name: SOPS_VERSION
          value: ${SOPS_VERSION}
      args:
        - |
          apk add curl
          mkdir -p /custom-tools/helm-plugins
          wget -qO- https://github.com/jkroepke/helm-secrets/releases/download/v${HELM_SECRETS_VERSION}/helm-secrets.tar.gz | tar -C /custom-tools/helm-plugins -xzf-;
          
          wget -qO /custom-tools/curl https://github.com/moparisthebest/static-curl/releases/latest/download/curl-amd64
          wget -qO /custom-tools/sops https://github.com/mozilla/sops/releases/download/v${SOPS_VERSION}/sops-v${SOPS_VERSION}.linux
          wget -qO /custom-tools/kubectl https://dl.k8s.io/release/v${KUBECTL_VERSION}/bin/linux/amd64/kubectl

          wget -qO- https://github.com/helmfile/vals/releases/download/v${VALS_VERSION}/vals_${VALS_VERSION}_linux_amd64.tar.gz | tar -xzf- -C /custom-tools/ vals;

          cp /custom-tools/helm-plugins/helm-secrets/scripts/wrapper/helm.sh /custom-tools/helm
          
          chmod +x /custom-tools/*
      volumeMounts:
        - mountPath: /custom-tools
          name: custom-tools

  # -- Additional volumeMounts to the repo server main container
  volumeMounts:
    - mountPath: /custom-tools
      name: custom-tools
    - mountPath: /usr/local/sbin/helm
      subPath: helm
      name: custom-tools

  # -- Additional volumes to the repo server pod
  volumes:
    - name: custom-tools
      emptyDir: {}

  # -- Resource limits and requests for the repo server pods
  resources:
   limits:
     cpu: 100m
     memory: 256Mi
   requests:
     cpu: 50m
     memory: 128Mi

  ## Repo server metrics service configuration
  metrics:
    # -- Deploy metrics service
    enabled: true
    serviceMonitor:
      # -- Enable a prometheus ServiceMonitor
      enabled: true
      # -- Prometheus ServiceMonitor selector
      selector:
        release: kube-prometheus-stack
      # -- Prometheus ServiceMonitor namespace
      namespace: "monitoring"

  ## Repo server service account
  ## If create is set to true, make sure to uncomment the name and update the rbac section below
  serviceAccount:
    # -- Create repo server service account
    create: false
    # -- Repo server service account name
    name: "${ARGOCD_REPO_SERVER_SERVICE_ACCOUNT}"

## ApplicationSet controller
applicationSet:
  # -- The number of ApplicationSet controller pods to run
  replicas: 2
  ## Metrics service configuration
  metrics:
    # -- Deploy metrics service
    enabled: true
    serviceMonitor:
      # -- Enable a prometheus ServiceMonitor
      enabled: true
      selector:
        release: kube-prometheus-stack
      # -- Prometheus ServiceMonitor namespace
      namespace: "monitoring"
  # -- Resource limits and requests for the ApplicationSet controller pods.
  resources:
    limits:
      cpu: 100m
      memory: 128Mi
    requests:
      cpu: 100m
      memory: 128Mi

## Notifications controller
notifications:
  # -- Enable notifications controller
  enabled: false
