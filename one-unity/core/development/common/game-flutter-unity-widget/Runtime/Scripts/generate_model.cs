// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do one of these:
//
//    using TPFive.Model;
//
//    var errorCode = ErrorCode.FromJson(jsonString);
//    var flutterMessage = FlutterMessage.FromJson(jsonString);
//    var flutterMessageType = FlutterMessageType.FromJson(jsonString);
//    var musicData = MusicData.FromJson(jsonString);
//    var prefs = Prefs.FromJson(jsonString);
//    var prefsData = PrefsData.FromJson(jsonString);
//    var recordStateType = RecordStateType.FromJson(jsonString);
//    var reelConfig = ReelConfig.FromJson(jsonString);
//    var reelDecoration = ReelDecoration.FromJson(jsonString);
//    var reelEntryType = ReelEntryType.FromJson(jsonString);
//    var reelFilePath = ReelFilePath.FromJson(jsonString);
//    var reelSceneConfig = ReelSceneConfig.FromJson(jsonString);
//    var roomConfig = RoomConfig.FromJson(jsonString);
//    var trackingConfig = TrackingConfig.FromJson(jsonString);
//    var trackingFlag = TrackingFlag.FromJson(jsonString);
//    var trackingState = TrackingState.FromJson(jsonString);
//    var trackingStateType = TrackingStateType.FromJson(jsonString);
//    var unityMessage = UnityMessage.FromJson(jsonString);
//    var unityMessageType = UnityMessageType.FromJson(jsonString);

namespace TPFive.Model
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class FlutterMessage
    {
        [JsonProperty("data")]
        public string Data { get; set; }

        [JsonProperty("errorCode", NullValueHandling = NullValueHandling.Ignore)]
        public ErrorCodeEnum? ErrorCode { get; set; }

        [JsonProperty("errorMsg")]
        public string ErrorMsg { get; set; }

        [JsonProperty("sessionId")]
        public string SessionId { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public FlutterMessageTypeEnum? Type { get; set; }
    }

    public partial class MusicData
    {
        [JsonProperty("aigcPath")]
        public string AigcPath { get; set; }

        [JsonProperty("singerName")]
        public string SingerName { get; set; }

        [JsonProperty("songName")]
        public string SongName { get; set; }

        [JsonProperty("songPath")]
        public string SongPath { get; set; }

        [JsonProperty("tag")]
        public string Tag { get; set; }

        [JsonProperty("thumbnailPath")]
        public string ThumbnailPath { get; set; }
    }

    public partial class PrefsData
    {
        [JsonProperty("prefs", NullValueHandling = NullValueHandling.Ignore)]
        public Dictionary<string, Prefs> Prefs { get; set; }
    }

    public partial class Prefs
    {
        [JsonProperty("description")]
        public string Description { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("value")]
        public Value? Value { get; set; }
    }

    public partial class ReelConfig
    {
        [JsonProperty("bundleId")]
        public string BundleId { get; set; }

        [JsonProperty("entry", NullValueHandling = NullValueHandling.Ignore)]
        public ReelEntryTypeEnum? Entry { get; set; }

        [JsonProperty("sceneName")]
        public string SceneName { get; set; }
    }

    public partial class ReelFilePath
    {
        [JsonProperty("audio")]
        public string Audio { get; set; }

        [JsonProperty("thumbnail")]
        public string Thumbnail { get; set; }

        [JsonProperty("video")]
        public string Video { get; set; }

        [JsonProperty("xrs")]
        public string Xrs { get; set; }
    }

    public partial class ReelSceneConfig
    {
        [JsonProperty("decorationActive")]
        public bool? DecorationActive { get; set; }

        [JsonProperty("decorations", NullValueHandling = NullValueHandling.Ignore)]
        public ReelDecoration[] Decorations { get; set; }

        [JsonProperty("initState", NullValueHandling = NullValueHandling.Ignore)]
        public RecordStateTypeEnum? InitState { get; set; }

        [JsonProperty("motionButtonActive")]
        public bool? MotionButtonActive { get; set; }
    }

    public partial class ReelDecoration
    {
        [JsonProperty("id")]
        public string Id { get; set; }

        [JsonProperty("itemType")]
        public string ItemType { get; set; }

        [JsonProperty("thumbnail")]
        public string Thumbnail { get; set; }
    }

    public partial class RoomConfig
    {
        [JsonProperty("SceneKey")]
        public string SceneKey { get; set; }

        [JsonProperty("SpaceId")]
        public string SpaceId { get; set; }
    }

    public partial class TrackingConfig
    {
        [JsonProperty("Face", NullValueHandling = NullValueHandling.Ignore)]
        public bool? Face { get; set; }

        [JsonProperty("FullBody", NullValueHandling = NullValueHandling.Ignore)]
        public bool? FullBody { get; set; }

        [JsonProperty("UpperBody", NullValueHandling = NullValueHandling.Ignore)]
        public bool? UpperBody { get; set; }
    }

    public partial class TrackingState
    {
        [JsonProperty("state", NullValueHandling = NullValueHandling.Ignore)]
        public TrackingStateTypeEnum? State { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TrackingFlagEnum? Type { get; set; }
    }

    public partial class UnityMessage
    {
        [JsonProperty("data")]
        public string Data { get; set; }

        [JsonProperty("errorCode", NullValueHandling = NullValueHandling.Ignore)]
        public ErrorCodeEnum? ErrorCode { get; set; }

        [JsonProperty("errorMsg")]
        public string ErrorMsg { get; set; }

        [JsonProperty("sessionId")]
        public string SessionId { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public UnityMessageTypeEnum? Type { get; set; }
    }

    public enum ErrorCodeEnum { Fail, Success };

    public enum FlutterMessageTypeEnum { CocreateJoin, Flutter, GetTrackCount, LoginSuccess, PlayMusic, Prefs, ReelDecorationDone, ReelGoBackDecoration, ReelSelectedDecoration, RequestReelSceneConfig, RequestToPreview, RequestToReelPage, RequestToSocialLobbyPage, RequestToSpace, RequestTrackingState, ResetRecord, SelectTrack, SetCamera, SetMic, SetMusic, StartAigc, StartFilm, StartPreview, StartRecord, StopPreview, StopRecord, ToggleTracking, UploadReel };

    /// <summary>
    /// type of entry reel scope
    /// </summary>
    public enum ReelEntryTypeEnum { Browse, Create };

    public enum RecordStateTypeEnum { Done, Preset, Preview, Recording, Standby, StartDecoration, Upload, Watch };

    public enum TrackingStateTypeEnum { Detecting, Initiating, Tracking };

    public enum TrackingFlagEnum { Face, FullBody, UpperBody };

    public enum UnityMessageTypeEnum { GeneralStatus, GeneratedAigc, HideLoading, LoginOnshow, RecordState, RequestAccessToken, ShowLoading, ShowToast, SwitchedToCocreatePage, SwitchedToReelPage, SwitchedToSocialLobbyPage, SwitchedToSpace, ToAvatarEdit, TrackingState, Unity };

    public partial struct Value
    {
        public bool? Bool;
        public string String;

        public static implicit operator Value(bool Bool) => new Value { Bool = Bool };
        public static implicit operator Value(string String) => new Value { String = String };
        public bool IsNull => Bool == null && String == null;
    }

    public class ErrorCode
    {
        public static ErrorCodeEnum FromJson(string json) => JsonConvert.DeserializeObject<ErrorCodeEnum>(json, TPFive.Model.Converter.Settings);
    }

    public partial class FlutterMessage
    {
        public static FlutterMessage FromJson(string json) => JsonConvert.DeserializeObject<FlutterMessage>(json, TPFive.Model.Converter.Settings);
    }

    public class FlutterMessageType
    {
        public static FlutterMessageTypeEnum FromJson(string json) => JsonConvert.DeserializeObject<FlutterMessageTypeEnum>(json, TPFive.Model.Converter.Settings);
    }

    public partial class MusicData
    {
        public static MusicData FromJson(string json) => JsonConvert.DeserializeObject<MusicData>(json, TPFive.Model.Converter.Settings);
    }

    public partial class Prefs
    {
        public static Prefs FromJson(string json) => JsonConvert.DeserializeObject<Prefs>(json, TPFive.Model.Converter.Settings);
    }

    public partial class PrefsData
    {
        public static PrefsData FromJson(string json) => JsonConvert.DeserializeObject<PrefsData>(json, TPFive.Model.Converter.Settings);
    }

    public class RecordStateType
    {
        public static RecordStateTypeEnum FromJson(string json) => JsonConvert.DeserializeObject<RecordStateTypeEnum>(json, TPFive.Model.Converter.Settings);
    }

    public partial class ReelConfig
    {
        public static ReelConfig FromJson(string json) => JsonConvert.DeserializeObject<ReelConfig>(json, TPFive.Model.Converter.Settings);
    }

    public partial class ReelDecoration
    {
        public static ReelDecoration FromJson(string json) => JsonConvert.DeserializeObject<ReelDecoration>(json, TPFive.Model.Converter.Settings);
    }

    public class ReelEntryType
    {
        public static ReelEntryTypeEnum FromJson(string json) => JsonConvert.DeserializeObject<ReelEntryTypeEnum>(json, TPFive.Model.Converter.Settings);
    }

    public partial class ReelFilePath
    {
        public static ReelFilePath FromJson(string json) => JsonConvert.DeserializeObject<ReelFilePath>(json, TPFive.Model.Converter.Settings);
    }

    public partial class ReelSceneConfig
    {
        public static ReelSceneConfig FromJson(string json) => JsonConvert.DeserializeObject<ReelSceneConfig>(json, TPFive.Model.Converter.Settings);
    }

    public partial class RoomConfig
    {
        public static RoomConfig FromJson(string json) => JsonConvert.DeserializeObject<RoomConfig>(json, TPFive.Model.Converter.Settings);
    }

    public partial class TrackingConfig
    {
        public static TrackingConfig FromJson(string json) => JsonConvert.DeserializeObject<TrackingConfig>(json, TPFive.Model.Converter.Settings);
    }

    public class TrackingFlag
    {
        public static TrackingFlagEnum FromJson(string json) => JsonConvert.DeserializeObject<TrackingFlagEnum>(json, TPFive.Model.Converter.Settings);
    }

    public partial class TrackingState
    {
        public static TrackingState FromJson(string json) => JsonConvert.DeserializeObject<TrackingState>(json, TPFive.Model.Converter.Settings);
    }

    public class TrackingStateType
    {
        public static TrackingStateTypeEnum FromJson(string json) => JsonConvert.DeserializeObject<TrackingStateTypeEnum>(json, TPFive.Model.Converter.Settings);
    }

    public partial class UnityMessage
    {
        public static UnityMessage FromJson(string json) => JsonConvert.DeserializeObject<UnityMessage>(json, TPFive.Model.Converter.Settings);
    }

    public class UnityMessageType
    {
        public static UnityMessageTypeEnum FromJson(string json) => JsonConvert.DeserializeObject<UnityMessageTypeEnum>(json, TPFive.Model.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this ErrorCodeEnum self) => JsonConvert.SerializeObject(self, TPFive.Model.Converter.Settings);
        public static string ToJson(this FlutterMessage self) => JsonConvert.SerializeObject(self, TPFive.Model.Converter.Settings);
        public static string ToJson(this FlutterMessageTypeEnum self) => JsonConvert.SerializeObject(self, TPFive.Model.Converter.Settings);
        public static string ToJson(this MusicData self) => JsonConvert.SerializeObject(self, TPFive.Model.Converter.Settings);
        public static string ToJson(this Prefs self) => JsonConvert.SerializeObject(self, TPFive.Model.Converter.Settings);
        public static string ToJson(this PrefsData self) => JsonConvert.SerializeObject(self, TPFive.Model.Converter.Settings);
        public static string ToJson(this RecordStateTypeEnum self) => JsonConvert.SerializeObject(self, TPFive.Model.Converter.Settings);
        public static string ToJson(this ReelConfig self) => JsonConvert.SerializeObject(self, TPFive.Model.Converter.Settings);
        public static string ToJson(this ReelDecoration self) => JsonConvert.SerializeObject(self, TPFive.Model.Converter.Settings);
        public static string ToJson(this ReelEntryTypeEnum self) => JsonConvert.SerializeObject(self, TPFive.Model.Converter.Settings);
        public static string ToJson(this ReelFilePath self) => JsonConvert.SerializeObject(self, TPFive.Model.Converter.Settings);
        public static string ToJson(this ReelSceneConfig self) => JsonConvert.SerializeObject(self, TPFive.Model.Converter.Settings);
        public static string ToJson(this RoomConfig self) => JsonConvert.SerializeObject(self, TPFive.Model.Converter.Settings);
        public static string ToJson(this TrackingConfig self) => JsonConvert.SerializeObject(self, TPFive.Model.Converter.Settings);
        public static string ToJson(this TrackingFlagEnum self) => JsonConvert.SerializeObject(self, TPFive.Model.Converter.Settings);
        public static string ToJson(this TrackingState self) => JsonConvert.SerializeObject(self, TPFive.Model.Converter.Settings);
        public static string ToJson(this TrackingStateTypeEnum self) => JsonConvert.SerializeObject(self, TPFive.Model.Converter.Settings);
        public static string ToJson(this UnityMessage self) => JsonConvert.SerializeObject(self, TPFive.Model.Converter.Settings);
        public static string ToJson(this UnityMessageTypeEnum self) => JsonConvert.SerializeObject(self, TPFive.Model.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                ErrorCodeEnumConverter.Singleton,
                FlutterMessageTypeEnumConverter.Singleton,
                ValueConverter.Singleton,
                RecordStateTypeEnumConverter.Singleton,
                ReelEntryTypeEnumConverter.Singleton,
                TrackingFlagEnumConverter.Singleton,
                TrackingStateTypeEnumConverter.Singleton,
                UnityMessageTypeEnumConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class ErrorCodeEnumConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(ErrorCodeEnum) || t == typeof(ErrorCodeEnum?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "FAIL":
                    return ErrorCodeEnum.Fail;
                case "SUCCESS":
                    return ErrorCodeEnum.Success;
            }
            throw new Exception("Cannot unmarshal type ErrorCodeEnum");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (ErrorCodeEnum)untypedValue;
            switch (value)
            {
                case ErrorCodeEnum.Fail:
                    serializer.Serialize(writer, "FAIL");
                    return;
                case ErrorCodeEnum.Success:
                    serializer.Serialize(writer, "SUCCESS");
                    return;
            }
            throw new Exception("Cannot marshal type ErrorCodeEnum");
        }

        public static readonly ErrorCodeEnumConverter Singleton = new ErrorCodeEnumConverter();
    }

    internal class FlutterMessageTypeEnumConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(FlutterMessageTypeEnum) || t == typeof(FlutterMessageTypeEnum?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "COCREATE_JOIN":
                    return FlutterMessageTypeEnum.CocreateJoin;
                case "FLUTTER":
                    return FlutterMessageTypeEnum.Flutter;
                case "GET_TRACK_COUNT":
                    return FlutterMessageTypeEnum.GetTrackCount;
                case "LOGIN_SUCCESS":
                    return FlutterMessageTypeEnum.LoginSuccess;
                case "PLAY_MUSIC":
                    return FlutterMessageTypeEnum.PlayMusic;
                case "PREFS":
                    return FlutterMessageTypeEnum.Prefs;
                case "REEL_DECORATION_DONE":
                    return FlutterMessageTypeEnum.ReelDecorationDone;
                case "REEL_GO_BACK_DECORATION":
                    return FlutterMessageTypeEnum.ReelGoBackDecoration;
                case "REEL_SELECTED_DECORATION":
                    return FlutterMessageTypeEnum.ReelSelectedDecoration;
                case "REQUEST_REEL_SCENE_CONFIG":
                    return FlutterMessageTypeEnum.RequestReelSceneConfig;
                case "REQUEST_TO_PREVIEW":
                    return FlutterMessageTypeEnum.RequestToPreview;
                case "REQUEST_TO_REEL_PAGE":
                    return FlutterMessageTypeEnum.RequestToReelPage;
                case "REQUEST_TO_SOCIAL_LOBBY_PAGE":
                    return FlutterMessageTypeEnum.RequestToSocialLobbyPage;
                case "REQUEST_TO_SPACE":
                    return FlutterMessageTypeEnum.RequestToSpace;
                case "REQUEST_TRACKING_STATE":
                    return FlutterMessageTypeEnum.RequestTrackingState;
                case "RESET_RECORD":
                    return FlutterMessageTypeEnum.ResetRecord;
                case "SELECT_TRACK":
                    return FlutterMessageTypeEnum.SelectTrack;
                case "SET_CAMERA":
                    return FlutterMessageTypeEnum.SetCamera;
                case "SET_MIC":
                    return FlutterMessageTypeEnum.SetMic;
                case "SET_MUSIC":
                    return FlutterMessageTypeEnum.SetMusic;
                case "START_AIGC":
                    return FlutterMessageTypeEnum.StartAigc;
                case "START_FILM":
                    return FlutterMessageTypeEnum.StartFilm;
                case "START_PREVIEW":
                    return FlutterMessageTypeEnum.StartPreview;
                case "START_RECORD":
                    return FlutterMessageTypeEnum.StartRecord;
                case "STOP_PREVIEW":
                    return FlutterMessageTypeEnum.StopPreview;
                case "STOP_RECORD":
                    return FlutterMessageTypeEnum.StopRecord;
                case "TOGGLE_TRACKING":
                    return FlutterMessageTypeEnum.ToggleTracking;
                case "UPLOAD_REEL":
                    return FlutterMessageTypeEnum.UploadReel;
            }
            throw new Exception("Cannot unmarshal type FlutterMessageTypeEnum");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (FlutterMessageTypeEnum)untypedValue;
            switch (value)
            {
                case FlutterMessageTypeEnum.CocreateJoin:
                    serializer.Serialize(writer, "COCREATE_JOIN");
                    return;
                case FlutterMessageTypeEnum.Flutter:
                    serializer.Serialize(writer, "FLUTTER");
                    return;
                case FlutterMessageTypeEnum.GetTrackCount:
                    serializer.Serialize(writer, "GET_TRACK_COUNT");
                    return;
                case FlutterMessageTypeEnum.LoginSuccess:
                    serializer.Serialize(writer, "LOGIN_SUCCESS");
                    return;
                case FlutterMessageTypeEnum.PlayMusic:
                    serializer.Serialize(writer, "PLAY_MUSIC");
                    return;
                case FlutterMessageTypeEnum.Prefs:
                    serializer.Serialize(writer, "PREFS");
                    return;
                case FlutterMessageTypeEnum.ReelDecorationDone:
                    serializer.Serialize(writer, "REEL_DECORATION_DONE");
                    return;
                case FlutterMessageTypeEnum.ReelGoBackDecoration:
                    serializer.Serialize(writer, "REEL_GO_BACK_DECORATION");
                    return;
                case FlutterMessageTypeEnum.ReelSelectedDecoration:
                    serializer.Serialize(writer, "REEL_SELECTED_DECORATION");
                    return;
                case FlutterMessageTypeEnum.RequestReelSceneConfig:
                    serializer.Serialize(writer, "REQUEST_REEL_SCENE_CONFIG");
                    return;
                case FlutterMessageTypeEnum.RequestToPreview:
                    serializer.Serialize(writer, "REQUEST_TO_PREVIEW");
                    return;
                case FlutterMessageTypeEnum.RequestToReelPage:
                    serializer.Serialize(writer, "REQUEST_TO_REEL_PAGE");
                    return;
                case FlutterMessageTypeEnum.RequestToSocialLobbyPage:
                    serializer.Serialize(writer, "REQUEST_TO_SOCIAL_LOBBY_PAGE");
                    return;
                case FlutterMessageTypeEnum.RequestToSpace:
                    serializer.Serialize(writer, "REQUEST_TO_SPACE");
                    return;
                case FlutterMessageTypeEnum.RequestTrackingState:
                    serializer.Serialize(writer, "REQUEST_TRACKING_STATE");
                    return;
                case FlutterMessageTypeEnum.ResetRecord:
                    serializer.Serialize(writer, "RESET_RECORD");
                    return;
                case FlutterMessageTypeEnum.SelectTrack:
                    serializer.Serialize(writer, "SELECT_TRACK");
                    return;
                case FlutterMessageTypeEnum.SetCamera:
                    serializer.Serialize(writer, "SET_CAMERA");
                    return;
                case FlutterMessageTypeEnum.SetMic:
                    serializer.Serialize(writer, "SET_MIC");
                    return;
                case FlutterMessageTypeEnum.SetMusic:
                    serializer.Serialize(writer, "SET_MUSIC");
                    return;
                case FlutterMessageTypeEnum.StartAigc:
                    serializer.Serialize(writer, "START_AIGC");
                    return;
                case FlutterMessageTypeEnum.StartFilm:
                    serializer.Serialize(writer, "START_FILM");
                    return;
                case FlutterMessageTypeEnum.StartPreview:
                    serializer.Serialize(writer, "START_PREVIEW");
                    return;
                case FlutterMessageTypeEnum.StartRecord:
                    serializer.Serialize(writer, "START_RECORD");
                    return;
                case FlutterMessageTypeEnum.StopPreview:
                    serializer.Serialize(writer, "STOP_PREVIEW");
                    return;
                case FlutterMessageTypeEnum.StopRecord:
                    serializer.Serialize(writer, "STOP_RECORD");
                    return;
                case FlutterMessageTypeEnum.ToggleTracking:
                    serializer.Serialize(writer, "TOGGLE_TRACKING");
                    return;
                case FlutterMessageTypeEnum.UploadReel:
                    serializer.Serialize(writer, "UPLOAD_REEL");
                    return;
            }
            throw new Exception("Cannot marshal type FlutterMessageTypeEnum");
        }

        public static readonly FlutterMessageTypeEnumConverter Singleton = new FlutterMessageTypeEnumConverter();
    }

    internal class ValueConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Value) || t == typeof(Value?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.Null:
                    return new Value { };
                case JsonToken.Boolean:
                    var boolValue = serializer.Deserialize<bool>(reader);
                    return new Value { Bool = boolValue };
                case JsonToken.String:
                case JsonToken.Date:
                    var stringValue = serializer.Deserialize<string>(reader);
                    return new Value { String = stringValue };
            }
            throw new Exception("Cannot unmarshal type Value");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (Value)untypedValue;
            if (value.IsNull)
            {
                serializer.Serialize(writer, null);
                return;
            }
            if (value.Bool != null)
            {
                serializer.Serialize(writer, value.Bool.Value);
                return;
            }
            if (value.String != null)
            {
                serializer.Serialize(writer, value.String);
                return;
            }
            throw new Exception("Cannot marshal type Value");
        }

        public static readonly ValueConverter Singleton = new ValueConverter();
    }

    internal class RecordStateTypeEnumConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(RecordStateTypeEnum) || t == typeof(RecordStateTypeEnum?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "DONE":
                    return RecordStateTypeEnum.Done;
                case "PRESET":
                    return RecordStateTypeEnum.Preset;
                case "PREVIEW":
                    return RecordStateTypeEnum.Preview;
                case "RECORDING":
                    return RecordStateTypeEnum.Recording;
                case "STANDBY":
                    return RecordStateTypeEnum.Standby;
                case "START_DECORATION":
                    return RecordStateTypeEnum.StartDecoration;
                case "UPLOAD":
                    return RecordStateTypeEnum.Upload;
                case "WATCH":
                    return RecordStateTypeEnum.Watch;
            }
            throw new Exception("Cannot unmarshal type RecordStateTypeEnum");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (RecordStateTypeEnum)untypedValue;
            switch (value)
            {
                case RecordStateTypeEnum.Done:
                    serializer.Serialize(writer, "DONE");
                    return;
                case RecordStateTypeEnum.Preset:
                    serializer.Serialize(writer, "PRESET");
                    return;
                case RecordStateTypeEnum.Preview:
                    serializer.Serialize(writer, "PREVIEW");
                    return;
                case RecordStateTypeEnum.Recording:
                    serializer.Serialize(writer, "RECORDING");
                    return;
                case RecordStateTypeEnum.Standby:
                    serializer.Serialize(writer, "STANDBY");
                    return;
                case RecordStateTypeEnum.StartDecoration:
                    serializer.Serialize(writer, "START_DECORATION");
                    return;
                case RecordStateTypeEnum.Upload:
                    serializer.Serialize(writer, "UPLOAD");
                    return;
                case RecordStateTypeEnum.Watch:
                    serializer.Serialize(writer, "WATCH");
                    return;
            }
            throw new Exception("Cannot marshal type RecordStateTypeEnum");
        }

        public static readonly RecordStateTypeEnumConverter Singleton = new RecordStateTypeEnumConverter();
    }

    internal class ReelEntryTypeEnumConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(ReelEntryTypeEnum) || t == typeof(ReelEntryTypeEnum?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "BROWSE":
                    return ReelEntryTypeEnum.Browse;
                case "CREATE":
                    return ReelEntryTypeEnum.Create;
            }
            throw new Exception("Cannot unmarshal type ReelEntryTypeEnum");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (ReelEntryTypeEnum)untypedValue;
            switch (value)
            {
                case ReelEntryTypeEnum.Browse:
                    serializer.Serialize(writer, "BROWSE");
                    return;
                case ReelEntryTypeEnum.Create:
                    serializer.Serialize(writer, "CREATE");
                    return;
            }
            throw new Exception("Cannot marshal type ReelEntryTypeEnum");
        }

        public static readonly ReelEntryTypeEnumConverter Singleton = new ReelEntryTypeEnumConverter();
    }

    internal class TrackingFlagEnumConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(TrackingFlagEnum) || t == typeof(TrackingFlagEnum?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "FACE":
                    return TrackingFlagEnum.Face;
                case "FULL_BODY":
                    return TrackingFlagEnum.FullBody;
                case "UPPER_BODY":
                    return TrackingFlagEnum.UpperBody;
            }
            throw new Exception("Cannot unmarshal type TrackingFlagEnum");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (TrackingFlagEnum)untypedValue;
            switch (value)
            {
                case TrackingFlagEnum.Face:
                    serializer.Serialize(writer, "FACE");
                    return;
                case TrackingFlagEnum.FullBody:
                    serializer.Serialize(writer, "FULL_BODY");
                    return;
                case TrackingFlagEnum.UpperBody:
                    serializer.Serialize(writer, "UPPER_BODY");
                    return;
            }
            throw new Exception("Cannot marshal type TrackingFlagEnum");
        }

        public static readonly TrackingFlagEnumConverter Singleton = new TrackingFlagEnumConverter();
    }

    internal class TrackingStateTypeEnumConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(TrackingStateTypeEnum) || t == typeof(TrackingStateTypeEnum?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "DETECTING":
                    return TrackingStateTypeEnum.Detecting;
                case "INITIATING":
                    return TrackingStateTypeEnum.Initiating;
                case "TRACKING":
                    return TrackingStateTypeEnum.Tracking;
            }
            throw new Exception("Cannot unmarshal type TrackingStateTypeEnum");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (TrackingStateTypeEnum)untypedValue;
            switch (value)
            {
                case TrackingStateTypeEnum.Detecting:
                    serializer.Serialize(writer, "DETECTING");
                    return;
                case TrackingStateTypeEnum.Initiating:
                    serializer.Serialize(writer, "INITIATING");
                    return;
                case TrackingStateTypeEnum.Tracking:
                    serializer.Serialize(writer, "TRACKING");
                    return;
            }
            throw new Exception("Cannot marshal type TrackingStateTypeEnum");
        }

        public static readonly TrackingStateTypeEnumConverter Singleton = new TrackingStateTypeEnumConverter();
    }

    internal class UnityMessageTypeEnumConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(UnityMessageTypeEnum) || t == typeof(UnityMessageTypeEnum?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "GENERAL_STATUS":
                    return UnityMessageTypeEnum.GeneralStatus;
                case "GENERATED_AIGC":
                    return UnityMessageTypeEnum.GeneratedAigc;
                case "HIDE_LOADING":
                    return UnityMessageTypeEnum.HideLoading;
                case "LOGIN_ONSHOW":
                    return UnityMessageTypeEnum.LoginOnshow;
                case "RECORD_STATE":
                    return UnityMessageTypeEnum.RecordState;
                case "REQUEST_ACCESS_TOKEN":
                    return UnityMessageTypeEnum.RequestAccessToken;
                case "SHOW_LOADING":
                    return UnityMessageTypeEnum.ShowLoading;
                case "SHOW_TOAST":
                    return UnityMessageTypeEnum.ShowToast;
                case "SWITCHED_TO_COCREATE_PAGE":
                    return UnityMessageTypeEnum.SwitchedToCocreatePage;
                case "SWITCHED_TO_REEL_PAGE":
                    return UnityMessageTypeEnum.SwitchedToReelPage;
                case "SWITCHED_TO_SOCIAL_LOBBY_PAGE":
                    return UnityMessageTypeEnum.SwitchedToSocialLobbyPage;
                case "SWITCHED_TO_SPACE":
                    return UnityMessageTypeEnum.SwitchedToSpace;
                case "TO_AVATAR_EDIT":
                    return UnityMessageTypeEnum.ToAvatarEdit;
                case "TRACKING_STATE":
                    return UnityMessageTypeEnum.TrackingState;
                case "UNITY":
                    return UnityMessageTypeEnum.Unity;
            }
            throw new Exception("Cannot unmarshal type UnityMessageTypeEnum");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (UnityMessageTypeEnum)untypedValue;
            switch (value)
            {
                case UnityMessageTypeEnum.GeneralStatus:
                    serializer.Serialize(writer, "GENERAL_STATUS");
                    return;
                case UnityMessageTypeEnum.GeneratedAigc:
                    serializer.Serialize(writer, "GENERATED_AIGC");
                    return;
                case UnityMessageTypeEnum.HideLoading:
                    serializer.Serialize(writer, "HIDE_LOADING");
                    return;
                case UnityMessageTypeEnum.LoginOnshow:
                    serializer.Serialize(writer, "LOGIN_ONSHOW");
                    return;
                case UnityMessageTypeEnum.RecordState:
                    serializer.Serialize(writer, "RECORD_STATE");
                    return;
                case UnityMessageTypeEnum.RequestAccessToken:
                    serializer.Serialize(writer, "REQUEST_ACCESS_TOKEN");
                    return;
                case UnityMessageTypeEnum.ShowLoading:
                    serializer.Serialize(writer, "SHOW_LOADING");
                    return;
                case UnityMessageTypeEnum.ShowToast:
                    serializer.Serialize(writer, "SHOW_TOAST");
                    return;
                case UnityMessageTypeEnum.SwitchedToCocreatePage:
                    serializer.Serialize(writer, "SWITCHED_TO_COCREATE_PAGE");
                    return;
                case UnityMessageTypeEnum.SwitchedToReelPage:
                    serializer.Serialize(writer, "SWITCHED_TO_REEL_PAGE");
                    return;
                case UnityMessageTypeEnum.SwitchedToSocialLobbyPage:
                    serializer.Serialize(writer, "SWITCHED_TO_SOCIAL_LOBBY_PAGE");
                    return;
                case UnityMessageTypeEnum.SwitchedToSpace:
                    serializer.Serialize(writer, "SWITCHED_TO_SPACE");
                    return;
                case UnityMessageTypeEnum.ToAvatarEdit:
                    serializer.Serialize(writer, "TO_AVATAR_EDIT");
                    return;
                case UnityMessageTypeEnum.TrackingState:
                    serializer.Serialize(writer, "TRACKING_STATE");
                    return;
                case UnityMessageTypeEnum.Unity:
                    serializer.Serialize(writer, "UNITY");
                    return;
            }
            throw new Exception("Cannot marshal type UnityMessageTypeEnum");
        }

        public static readonly UnityMessageTypeEnumConverter Singleton = new UnityMessageTypeEnumConverter();
    }
}
