{{>partial_header}}
#pragma warning disable
using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

{{#models}}
{{#model}}
namespace {{packageName}}.{{modelPackage}}
{
{{#isEnum}}
{{>enumClass}}
}
{{/isEnum}}
{{^isEnum}}
    /// <summary>
    /// {{description}}
    /// </summary>
    public {{#modelClassModifier}}{{.}} {{/modelClassModifier}}class {{classname}} : {{#parent}}{{{.}}}, {{/parent}}IEquatable<{{classname}}>
    {
        {{#vars}}
        {{#items.isEnum}}
        {{#items}}
        {{^complexType}}
{{>enumClass}}
        {{/complexType}}
        {{/items}}
        {{/items.isEnum}}
        {{^items.isEnum}}
        {{#isEnum}}
        {{^complexType}}
{{>enumClass}}
        {{/complexType}}
        {{/isEnum}}
        {{/items.isEnum}}
        /// <summary>
        /// {{description}}{{^description}}Gets or Sets {{{name}}}{{/description}}{{#required}} [Required]{{/required}}
        /// </summary>{{#description}}
        /// <value>{{.}}</value>{{/description}}{{#pattern}}
        [RegularExpression("{{{.}}}")]{{/pattern}}{{#minLength}}{{#maxLength}}
        [StringLength({{maxLength}}, MinimumLength={{minLength}})]{{/maxLength}}{{/minLength}}{{#minLength}}{{^maxLength}}
        [MinLength({{minLength}})]{{/maxLength}}{{/minLength}}{{^minLength}}{{#maxLength}}
        [MaxLength({{.}})]{{/maxLength}}{{/minLength}}{{#minimum}}{{#maximum}}
        [Range({{minimum}}, {{maximum}})]{{/maximum}}{{/minimum}}
        [JsonProperty(PropertyName = "{{baseName}}"{{#isNullable}}, NullValueHandling = NullValueHandling.Ignore{{/isNullable}})]
        {{#isEnum}}
        public {{{datatypeWithEnum}}}{{#isNullable}}?{{/isNullable}} {{name}} { get; set; }{{#defaultValue}} = {{{.}}};{{/defaultValue}}
        {{/isEnum}}
        {{^isEnum}}
        public {{{dataType}}} {{name}} { get; {{#isReadOnly}}private {{/isReadOnly}}set; }{{#defaultValue}} = {{{.}}};{{/defaultValue}}
        {{/isEnum}}
        {{^-last}}

        {{/-last}}
        {{/vars}}

        public static bool operator ==({{classname}} left, {{classname}} right)
        {
            return Equals(left, right);
        }

        public static bool operator !=({{classname}} left, {{classname}} right)
        {
            return !Equals(left, right);
        }

        /// <summary>
        /// Returns the JSON string presentation of the object.
        /// </summary>
        /// <returns>JSON string presentation of the object.</returns>
        public override string ToString()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented, JsonUtils.ToStringJsonSerializerSettings);
        }

        /// <summary>
        /// Returns true if objects are equal.
        /// </summary>
        /// <param name="obj">Object to be compared.</param>
        /// <returns>Boolean.</returns>
        public override bool Equals(object obj)
        {
            if (obj is null)
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            return obj.GetType() == GetType() && Equals(({{classname}})obj);
        }

        /// <summary>
        /// Returns true if {{classname}} instances are equal.
        /// </summary>
        /// <param name="other">Instance of {{classname}} to be compared.</param>
        /// <returns>Boolean.</returns>
        public bool Equals({{classname}} other)
        {
            if (other is null)
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            return{{#vars}}{{^isContainer}}
                (
                    {{name}} == other.{{name}} ||
                    {{^vendorExtensions.x-is-value-type}}{{name}} != null &&{{/vendorExtensions.x-is-value-type}}
                    {{name}}.Equals(other.{{name}})
                ){{^-last}} &&{{/-last}}{{/isContainer}}{{#isContainer}}
                (
                    {{name}} == other.{{name}} ||
                    {{^vendorExtensions.x-is-value-type}}{{name}} != null &&
                    other.{{name}} != null &&
                    {{/vendorExtensions.x-is-value-type}}{{name}}.SequenceEqual(other.{{name}})
                ){{^-last}} && {{/-last}}{{/isContainer}}{{/vars}}{{^vars}}false{{/vars}};
        }

        /// <summary>
        /// Gets the hash code.
        /// </summary>
        /// <returns>Hash code.</returns>
        public override int GetHashCode()
        {
            var hashCode = default(HashCode);

            {{#vars}}
            hashCode.Add({{name}});
            {{/vars}}

            return hashCode.ToHashCode();
        }
    }
}
{{/isEnum}}
{{/model}}
{{/models}}
#pragma warning restore