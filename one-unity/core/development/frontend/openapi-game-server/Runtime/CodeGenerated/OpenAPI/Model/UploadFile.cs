/*
 * Server API - Asset
 *
 * The Restful APIs of Asset.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#pragma warning disable
using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace TPFive.OpenApi.GameServer.Model
{
    /// <summary>
    /// 
    /// </summary>
    public class UploadFile : IEquatable<UploadFile>
    {
        /// <summary>
        /// unique file id(file name) [Required]
        /// </summary>
        /// <value>unique file id(file name)</value>
        [JsonProperty(PropertyName = "file_id")]
        public string FileId { get; set; }

        /// <summary>
        /// file content type [Required]
        /// </summary>
        /// <value>file content type</value>
        [JsonProperty(PropertyName = "content_type")]
        public string ContentType { get; set; }

        /// <summary>
        /// file content length(bytes) [Required]
        /// </summary>
        /// <value>file content length(bytes)</value>
        [JsonProperty(PropertyName = "content_length")]
        public int ContentLength { get; set; }

        /// <summary>
        /// file checksum(sha256 base64 encoded) [Required]
        /// </summary>
        /// <value>file checksum(sha256 base64 encoded)</value>
        [JsonProperty(PropertyName = "checksum")]
        public string Checksum { get; set; }

        public static bool operator ==(UploadFile left, UploadFile right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(UploadFile left, UploadFile right)
        {
            return !Equals(left, right);
        }

        /// <summary>
        /// Returns the JSON string presentation of the object.
        /// </summary>
        /// <returns>JSON string presentation of the object.</returns>
        public override string ToString()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented, JsonUtils.ToStringJsonSerializerSettings);
        }

        /// <summary>
        /// Returns true if objects are equal.
        /// </summary>
        /// <param name="obj">Object to be compared.</param>
        /// <returns>Boolean.</returns>
        public override bool Equals(object obj)
        {
            if (obj is null)
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            return obj.GetType() == GetType() && Equals((UploadFile)obj);
        }

        /// <summary>
        /// Returns true if UploadFile instances are equal.
        /// </summary>
        /// <param name="other">Instance of UploadFile to be compared.</param>
        /// <returns>Boolean.</returns>
        public bool Equals(UploadFile other)
        {
            if (other is null)
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            return
                (
                    FileId == other.FileId ||
                    FileId != null &&
                    FileId.Equals(other.FileId)
                ) &&
                (
                    ContentType == other.ContentType ||
                    ContentType != null &&
                    ContentType.Equals(other.ContentType)
                ) &&
                (
                    ContentLength == other.ContentLength ||
                    
                    ContentLength.Equals(other.ContentLength)
                ) &&
                (
                    Checksum == other.Checksum ||
                    Checksum != null &&
                    Checksum.Equals(other.Checksum)
                );
        }

        /// <summary>
        /// Gets the hash code.
        /// </summary>
        /// <returns>Hash code.</returns>
        public override int GetHashCode()
        {
            var hashCode = default(HashCode);

            hashCode.Add(FileId);
            hashCode.Add(ContentType);
            hashCode.Add(ContentLength);
            hashCode.Add(Checksum);

            return hashCode.ToHashCode();
        }
    }
}
#pragma warning restore