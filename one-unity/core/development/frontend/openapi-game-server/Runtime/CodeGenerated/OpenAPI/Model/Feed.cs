/*
 * Server API - Feed
 *
 * The Restful APIs of Feed.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#pragma warning disable
using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace TPFive.OpenApi.GameServer.Model
{
    /// <summary>
    /// 
    /// </summary>
    public class Feed : IEquatable<Feed>
    {
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public string Id { get; set; }


        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum AvatarReel for avatar_reel
            /// </summary>
            [EnumMember(Value = "avatar_reel")]
            AvatarReel = 1,

            /// <summary>
            /// Enum Space for space
            /// </summary>
            [EnumMember(Value = "space")]
            Space = 2,

            /// <summary>
            /// Enum AvatarText for avatar_text
            /// </summary>
            [EnumMember(Value = "avatar_text")]
            AvatarText = 3,

            /// <summary>
            /// Enum AvatarImg for avatar_img
            /// </summary>
            [EnumMember(Value = "avatar_img")]
            AvatarImg = 4,

            /// <summary>
            /// Enum Avatar for avatar
            /// </summary>
            [EnumMember(Value = "avatar")]
            Avatar = 5,
        }
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [JsonProperty(PropertyName = "type")]
        public TypeEnum Type { get; set; }

        /// <summary>
        /// Gets or Sets OwnerXrid
        /// </summary>
        [JsonProperty(PropertyName = "owner_xrid")]
        public string OwnerXrid { get; set; }

        /// <summary>
        /// Gets or Sets OwnerNickname
        /// </summary>
        [JsonProperty(PropertyName = "owner_nickname")]
        public string OwnerNickname { get; set; }

        /// <summary>
        /// Gets or Sets Categories
        /// </summary>
        [JsonProperty(PropertyName = "categories")]
        public List<CategoriesEnum> Categories { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [JsonProperty(PropertyName = "updated_at")]
        public DateTime UpdatedAt { get; set; }

        /// <summary>
        /// Gets or Sets Content
        /// </summary>
        [JsonProperty(PropertyName = "content")]
        public FeedContent Content { get; set; }

        public static bool operator ==(Feed left, Feed right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Feed left, Feed right)
        {
            return !Equals(left, right);
        }

        /// <summary>
        /// Returns the JSON string presentation of the object.
        /// </summary>
        /// <returns>JSON string presentation of the object.</returns>
        public override string ToString()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented, JsonUtils.ToStringJsonSerializerSettings);
        }

        /// <summary>
        /// Returns true if objects are equal.
        /// </summary>
        /// <param name="obj">Object to be compared.</param>
        /// <returns>Boolean.</returns>
        public override bool Equals(object obj)
        {
            if (obj is null)
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            return obj.GetType() == GetType() && Equals((Feed)obj);
        }

        /// <summary>
        /// Returns true if Feed instances are equal.
        /// </summary>
        /// <param name="other">Instance of Feed to be compared.</param>
        /// <returns>Boolean.</returns>
        public bool Equals(Feed other)
        {
            if (other is null)
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            return
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) &&
                (
                    Type == other.Type ||
                    
                    Type.Equals(other.Type)
                ) &&
                (
                    OwnerXrid == other.OwnerXrid ||
                    OwnerXrid != null &&
                    OwnerXrid.Equals(other.OwnerXrid)
                ) &&
                (
                    OwnerNickname == other.OwnerNickname ||
                    OwnerNickname != null &&
                    OwnerNickname.Equals(other.OwnerNickname)
                ) &&
                (
                    Categories == other.Categories ||
                    Categories != null &&
                    other.Categories != null &&
                    Categories.SequenceEqual(other.Categories)
                ) && 
                (
                    UpdatedAt == other.UpdatedAt ||
                    UpdatedAt != null &&
                    UpdatedAt.Equals(other.UpdatedAt)
                ) &&
                (
                    Content == other.Content ||
                    Content != null &&
                    Content.Equals(other.Content)
                );
        }

        /// <summary>
        /// Gets the hash code.
        /// </summary>
        /// <returns>Hash code.</returns>
        public override int GetHashCode()
        {
            var hashCode = default(HashCode);

            hashCode.Add(Id);
            hashCode.Add(Type);
            hashCode.Add(OwnerXrid);
            hashCode.Add(OwnerNickname);
            hashCode.Add(Categories);
            hashCode.Add(UpdatedAt);
            hashCode.Add(Content);

            return hashCode.ToHashCode();
        }
    }
}
#pragma warning restore