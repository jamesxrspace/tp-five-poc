/*
 * Server API - Avatar
 *
 * The Restful APIs of Avatar.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#pragma warning disable
using System;
using System.Collections.Generic;
using System.IO;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using BestHTTP;
using Microsoft.Extensions.Logging;
using Newtonsoft.Json;
using XRSpace.OpenAPI;
using XRSpace.OpenAPI.Utilities;
using VContainer;
using TPFive.OpenApi.GameServer.Model;

namespace TPFive.OpenApi.GameServer
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAvatarApi
    {
        /// <summary>
        /// Activate avatar Activate avatar by avatar id
        /// </summary>
        /// <param name="avatarId">avatar id</param>
        /// <returns>Task &lt; AvatarActivateResponse &gt;</returns>
        Task<AvatarActivateResponse> ActivateAvatarAsync(string avatarId, RequestConfig requestConfig = default, CancellationToken cancellationToken = default);

        /// <summary>
        /// Get current avatar detail list Get current avatar detail list by xrids
        /// </summary>
        /// <param name="xrids">Get the xrids of which users avatar detail</param>
        /// <param name="size">size of queries times</param>
        /// <param name="offset">offset of items</param>
        /// <returns>Task &lt; AvatarMetadataListResponse &gt;</returns>
        Task<AvatarMetadataListResponse> GetCurrentAvatarMetadataListAsync(List<string> xrids, int size, int? offset = default, RequestConfig requestConfig = default, CancellationToken cancellationToken = default);

        /// <summary>
        /// Get myself current avatar detail Get myself current avatar detail
        /// </summary>
        /// <returns>Task &lt; AvatarMetadataResponse &gt;</returns>
        Task<AvatarMetadataResponse> GetMyselfCurrentAvatarMetadataAsync(RequestConfig requestConfig = default, CancellationToken cancellationToken = default);

        /// <summary>
        /// Save avatar Save edited avatar.
        /// </summary>
        /// <param name="type"></param>
        /// <param name="avatarFormat">avatar format</param>
        /// <param name="avatarAsset">avatar asset</param>
        /// <param name="avatarHead">avatar head</param>
        /// <param name="avatarUpperBody">avatar upper body</param>
        /// <param name="avatarFullBody">avatar full body</param>
        /// <param name="avatarId">avatar id</param>
        /// <returns>Task &lt; AvatarMetadataResponse &gt;</returns>
        Task<AvatarMetadataResponse> SaveAvatarAsync(AvatarModelType type, Object avatarFormat = default, System.IO.Stream avatarAsset = default, System.IO.Stream avatarHead = default, System.IO.Stream avatarUpperBody = default, System.IO.Stream avatarFullBody = default, string avatarId = default, RequestConfig requestConfig = default, CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// Represents a collection of functions to interact with the AvatarApi endpoints.
    /// </summary>
    public class AvatarApi : IAvatarApi
    {
        private readonly ILogger logger;
        private readonly IServerBaseUriProvider serverBaseUriProvider;
        private readonly IAuthTokenProvider authTokenProvider;

        /// <summary>
        /// Initializes a new instance of the <see cref="AvatarApi"/> class.
        /// </summary>
        /// <param name="loggerFactory"> an instance of ILoggerFactory</param>        
        /// <param name="serverBaseUriProvider"> an instance of IServerBaseUriProvider</param>
        /// <param name="authTokenProvider"> an instance of IAuthTokenProvider</param>
        [Inject]
        public AvatarApi(
            ILoggerFactory loggerFactory,
            IServerBaseUriProvider serverBaseUriProvider,
            IAuthTokenProvider authTokenProvider)
        {
            this.logger = loggerFactory.CreateLogger<AvatarApi>();
            this.serverBaseUriProvider = serverBaseUriProvider;
            this.authTokenProvider = authTokenProvider;
        }

        public async Task<AvatarActivateResponse> ActivateAvatarAsync(string avatarId, RequestConfig requestConfig = null, CancellationToken cancellationToken = default)
        {
            string path = "/api/v1/avatar/activate/{avatar_id}";

            // Replace the path parameters with their values.
            path = HttpUtil.SetPathParameter(path, "{avatar_id}", avatarId);

            try
            {
                return await OpenApiUtil.RequestAsync<AvatarActivateResponse>(CreateRequest, authTokenProvider, requestConfig, cancellationToken);
            }
            catch (TaskCanceledException)
            {
                logger.LogInformation("{Method}(): Be canceled.", nameof(ActivateAvatarAsync));
                throw;
            }
            catch (Exception ex)
            {
                logger.LogError("{Method}(): Failed. Exception: {Exception}", nameof(ActivateAvatarAsync), ex.Message);
                throw;
            }

            HTTPRequest CreateRequest()
            {
                var uri = new Uri(serverBaseUriProvider.BaseUri, path);
                var httpRequest = new HTTPRequest(uri, HTTPMethods.Post);
                httpRequest.DisableCache = true;

                // Bearer authentication required
                httpRequest.AddHeader("Authorization", $"Bearer {authTokenProvider.GetAuthToken()}");

                // Accept Type
                httpRequest.AddHeader("Accept", "application/json");

                return httpRequest;
            }
        }

        public async Task<AvatarMetadataListResponse> GetCurrentAvatarMetadataListAsync(List<string> xrids, int size, int? offset = default, RequestConfig requestConfig = null, CancellationToken cancellationToken = default)
        {
            string path = "/api/v1/avatar/current/list";

            // Build the query string into the path
            var paramMap = new Multimap<string, string>();
            HttpUtil.ParameterToMultiMap("multi", "xrids", xrids, paramMap);
            HttpUtil.ParameterToMultiMap("multi", "offset", offset, paramMap);
            HttpUtil.ParameterToMultiMap("multi", "size", size, paramMap);
            path = HttpUtil.SetQueryParameter(path, paramMap);

            try
            {
                return await OpenApiUtil.RequestAsync<AvatarMetadataListResponse>(CreateRequest, authTokenProvider, requestConfig, cancellationToken);
            }
            catch (TaskCanceledException)
            {
                logger.LogInformation("{Method}(): Be canceled.", nameof(GetCurrentAvatarMetadataListAsync));
                throw;
            }
            catch (Exception ex)
            {
                logger.LogError("{Method}(): Failed. Exception: {Exception}", nameof(GetCurrentAvatarMetadataListAsync), ex.Message);
                throw;
            }

            HTTPRequest CreateRequest()
            {
                var uri = new Uri(serverBaseUriProvider.BaseUri, path);
                var httpRequest = new HTTPRequest(uri, HTTPMethods.Get);
                httpRequest.DisableCache = true;

                // Bearer authentication required
                httpRequest.AddHeader("Authorization", $"Bearer {authTokenProvider.GetAuthToken()}");

                // Accept Type
                httpRequest.AddHeader("Accept", "application/json");

                return httpRequest;
            }
        }

        public async Task<AvatarMetadataResponse> GetMyselfCurrentAvatarMetadataAsync(RequestConfig requestConfig = null, CancellationToken cancellationToken = default)
        {
            string path = "/api/v1/avatar/current";

            try
            {
                return await OpenApiUtil.RequestAsync<AvatarMetadataResponse>(CreateRequest, authTokenProvider, requestConfig, cancellationToken);
            }
            catch (TaskCanceledException)
            {
                logger.LogInformation("{Method}(): Be canceled.", nameof(GetMyselfCurrentAvatarMetadataAsync));
                throw;
            }
            catch (Exception ex)
            {
                logger.LogError("{Method}(): Failed. Exception: {Exception}", nameof(GetMyselfCurrentAvatarMetadataAsync), ex.Message);
                throw;
            }

            HTTPRequest CreateRequest()
            {
                var uri = new Uri(serverBaseUriProvider.BaseUri, path);
                var httpRequest = new HTTPRequest(uri, HTTPMethods.Get);
                httpRequest.DisableCache = true;

                // Bearer authentication required
                httpRequest.AddHeader("Authorization", $"Bearer {authTokenProvider.GetAuthToken()}");

                // Accept Type
                httpRequest.AddHeader("Accept", "application/json");

                return httpRequest;
            }
        }

        public async Task<AvatarMetadataResponse> SaveAvatarAsync(AvatarModelType type, Object avatarFormat = default, System.IO.Stream avatarAsset = default, System.IO.Stream avatarHead = default, System.IO.Stream avatarUpperBody = default, System.IO.Stream avatarFullBody = default, string avatarId = default, RequestConfig requestConfig = null, CancellationToken cancellationToken = default)
        {
            string path = "/api/v1/avatar/save";

            try
            {
                return await OpenApiUtil.RequestAsync<AvatarMetadataResponse>(CreateRequest, authTokenProvider, requestConfig, cancellationToken);
            }
            catch (TaskCanceledException)
            {
                logger.LogInformation("{Method}(): Be canceled.", nameof(SaveAvatarAsync));
                throw;
            }
            catch (Exception ex)
            {
                logger.LogError("{Method}(): Failed. Exception: {Exception}", nameof(SaveAvatarAsync), ex.Message);
                throw;
            }

            HTTPRequest CreateRequest()
            {
                var uri = new Uri(serverBaseUriProvider.BaseUri, path);
                var httpRequest = new HTTPRequest(uri, HTTPMethods.Post);
                httpRequest.DisableCache = true;

                // Bearer authentication required
                httpRequest.AddHeader("Authorization", $"Bearer {authTokenProvider.GetAuthToken()}");

                // Content Type
                httpRequest.AddHeader("Content-Type", "multipart/form-data");

                // Accept Type
                httpRequest.AddHeader("Accept", "application/json");

                // multipart form-data
                var multipartStream = new MultipartFormDataStream(httpRequest);

                // multipart form-data: type
                if (type != null)
                {
                    multipartStream.AddField("type", HttpUtil.ParameterToString(type));
                }

                // multipart form-data: avatar_format
                if (avatarFormat != null)
                {
                    multipartStream.AddField("avatar_format", HttpUtil.ParameterToString(avatarFormat));
                }

                // multipart form-data: avatar_asset
                if (avatarAsset != null)
                {
                    if (avatarAsset is FileStream fileStream && !string.IsNullOrEmpty(fileStream.Name) && fileStream.Name.IndexOfAny(Path.GetInvalidPathChars()) == -1)
                    {
                        multipartStream.AddStreamField(fileStream, "avatar_asset", Path.GetFileName(fileStream.Name));
                    }
                    else
                    {
                        multipartStream.AddStreamField(avatarAsset, "avatar_asset");
                    }
                }

                // multipart form-data: avatar_head
                if (avatarHead != null)
                {
                    if (avatarHead is FileStream fileStream && !string.IsNullOrEmpty(fileStream.Name) && fileStream.Name.IndexOfAny(Path.GetInvalidPathChars()) == -1)
                    {
                        multipartStream.AddStreamField(fileStream, "avatar_head", Path.GetFileName(fileStream.Name));
                    }
                    else
                    {
                        multipartStream.AddStreamField(avatarHead, "avatar_head");
                    }
                }

                // multipart form-data: avatar_upper_body
                if (avatarUpperBody != null)
                {
                    if (avatarUpperBody is FileStream fileStream && !string.IsNullOrEmpty(fileStream.Name) && fileStream.Name.IndexOfAny(Path.GetInvalidPathChars()) == -1)
                    {
                        multipartStream.AddStreamField(fileStream, "avatar_upper_body", Path.GetFileName(fileStream.Name));
                    }
                    else
                    {
                        multipartStream.AddStreamField(avatarUpperBody, "avatar_upper_body");
                    }
                }

                // multipart form-data: avatar_full_body
                if (avatarFullBody != null)
                {
                    if (avatarFullBody is FileStream fileStream && !string.IsNullOrEmpty(fileStream.Name) && fileStream.Name.IndexOfAny(Path.GetInvalidPathChars()) == -1)
                    {
                        multipartStream.AddStreamField(fileStream, "avatar_full_body", Path.GetFileName(fileStream.Name));
                    }
                    else
                    {
                        multipartStream.AddStreamField(avatarFullBody, "avatar_full_body");
                    }
                }

                // multipart form-data: avatar_id
                if (avatarId != null)
                {
                    multipartStream.AddField("avatar_id", HttpUtil.ParameterToString(avatarId));
                }

                return httpRequest;
            }
        }
    }
}
#pragma warning restore