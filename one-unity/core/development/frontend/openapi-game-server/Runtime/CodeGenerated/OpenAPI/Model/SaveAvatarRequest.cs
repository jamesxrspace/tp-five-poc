/*
 * Server API - Avatar
 *
 * The Restful APIs of Avatar.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#pragma warning disable
using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace TPFive.OpenApi.GameServer.Model
{
    /// <summary>
    /// 
    /// </summary>
    public class SaveAvatarRequest : IEquatable<SaveAvatarRequest>
    {
        /// <summary>
        /// Gets or Sets Type [Required]
        /// </summary>
        [JsonProperty(PropertyName = "type")]
        public AvatarModelType Type { get; set; }

        /// <summary>
        /// avatar format
        /// </summary>
        /// <value>avatar format</value>
        [JsonProperty(PropertyName = "avatar_format")]
        public Object AvatarFormat { get; set; }

        /// <summary>
        /// avatar asset
        /// </summary>
        /// <value>avatar asset</value>
        [JsonProperty(PropertyName = "avatar_asset")]
        public System.IO.Stream AvatarAsset { get; set; }

        /// <summary>
        /// avatar head
        /// </summary>
        /// <value>avatar head</value>
        [JsonProperty(PropertyName = "avatar_head")]
        public System.IO.Stream AvatarHead { get; set; }

        /// <summary>
        /// avatar upper body
        /// </summary>
        /// <value>avatar upper body</value>
        [JsonProperty(PropertyName = "avatar_upper_body")]
        public System.IO.Stream AvatarUpperBody { get; set; }

        /// <summary>
        /// avatar full body
        /// </summary>
        /// <value>avatar full body</value>
        [JsonProperty(PropertyName = "avatar_full_body")]
        public System.IO.Stream AvatarFullBody { get; set; }

        /// <summary>
        /// avatar id
        /// </summary>
        /// <value>avatar id</value>
        [JsonProperty(PropertyName = "avatar_id")]
        public string AvatarId { get; set; }

        public static bool operator ==(SaveAvatarRequest left, SaveAvatarRequest right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(SaveAvatarRequest left, SaveAvatarRequest right)
        {
            return !Equals(left, right);
        }

        /// <summary>
        /// Returns the JSON string presentation of the object.
        /// </summary>
        /// <returns>JSON string presentation of the object.</returns>
        public override string ToString()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented, JsonUtils.ToStringJsonSerializerSettings);
        }

        /// <summary>
        /// Returns true if objects are equal.
        /// </summary>
        /// <param name="obj">Object to be compared.</param>
        /// <returns>Boolean.</returns>
        public override bool Equals(object obj)
        {
            if (obj is null)
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            return obj.GetType() == GetType() && Equals((SaveAvatarRequest)obj);
        }

        /// <summary>
        /// Returns true if SaveAvatarRequest instances are equal.
        /// </summary>
        /// <param name="other">Instance of SaveAvatarRequest to be compared.</param>
        /// <returns>Boolean.</returns>
        public bool Equals(SaveAvatarRequest other)
        {
            if (other is null)
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            return
                (
                    Type == other.Type ||
                    
                    Type.Equals(other.Type)
                ) &&
                (
                    AvatarFormat == other.AvatarFormat ||
                    AvatarFormat != null &&
                    AvatarFormat.Equals(other.AvatarFormat)
                ) &&
                (
                    AvatarAsset == other.AvatarAsset ||
                    AvatarAsset != null &&
                    AvatarAsset.Equals(other.AvatarAsset)
                ) &&
                (
                    AvatarHead == other.AvatarHead ||
                    AvatarHead != null &&
                    AvatarHead.Equals(other.AvatarHead)
                ) &&
                (
                    AvatarUpperBody == other.AvatarUpperBody ||
                    AvatarUpperBody != null &&
                    AvatarUpperBody.Equals(other.AvatarUpperBody)
                ) &&
                (
                    AvatarFullBody == other.AvatarFullBody ||
                    AvatarFullBody != null &&
                    AvatarFullBody.Equals(other.AvatarFullBody)
                ) &&
                (
                    AvatarId == other.AvatarId ||
                    AvatarId != null &&
                    AvatarId.Equals(other.AvatarId)
                );
        }

        /// <summary>
        /// Gets the hash code.
        /// </summary>
        /// <returns>Hash code.</returns>
        public override int GetHashCode()
        {
            var hashCode = default(HashCode);

            hashCode.Add(Type);
            hashCode.Add(AvatarFormat);
            hashCode.Add(AvatarAsset);
            hashCode.Add(AvatarHead);
            hashCode.Add(AvatarUpperBody);
            hashCode.Add(AvatarFullBody);
            hashCode.Add(AvatarId);

            return hashCode.ToHashCode();
        }
    }
}
#pragma warning restore