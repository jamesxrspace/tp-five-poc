/*
 * Server API - Login
 *
 * The Restful APIs of Login.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#pragma warning disable
using System;
using System.Collections.Generic;
using System.IO;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using BestHTTP;
using Microsoft.Extensions.Logging;
using Newtonsoft.Json;
using XRSpace.OpenAPI;
using XRSpace.OpenAPI.Utilities;
using VContainer;
using TPFive.OpenApi.GameServer.Model;

namespace TPFive.OpenApi.GameServer
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ILoginApi
    {
        /// <summary>
        /// Get user profile. 
        /// </summary>
        /// <returns>Task &lt; GetProfileResponse &gt;</returns>
        Task<GetProfileResponse> GetUserProfileAsync(RequestConfig requestConfig = default, CancellationToken cancellationToken = default);

        /// <summary>
        /// Login game server. 
        /// </summary>
        /// <returns>Task &lt; BaseResponse &gt;</returns>
        Task<BaseResponse> PostLoginAsync(RequestConfig requestConfig = default, CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// Represents a collection of functions to interact with the LoginApi endpoints.
    /// </summary>
    public class LoginApi : ILoginApi
    {
        private readonly ILogger logger;
        private readonly IServerBaseUriProvider serverBaseUriProvider;
        private readonly IAuthTokenProvider authTokenProvider;

        /// <summary>
        /// Initializes a new instance of the <see cref="LoginApi"/> class.
        /// </summary>
        /// <param name="loggerFactory"> an instance of ILoggerFactory</param>        
        /// <param name="serverBaseUriProvider"> an instance of IServerBaseUriProvider</param>
        /// <param name="authTokenProvider"> an instance of IAuthTokenProvider</param>
        [Inject]
        public LoginApi(
            ILoggerFactory loggerFactory,
            IServerBaseUriProvider serverBaseUriProvider,
            IAuthTokenProvider authTokenProvider)
        {
            this.logger = loggerFactory.CreateLogger<LoginApi>();
            this.serverBaseUriProvider = serverBaseUriProvider;
            this.authTokenProvider = authTokenProvider;
        }

        public async Task<GetProfileResponse> GetUserProfileAsync(RequestConfig requestConfig = null, CancellationToken cancellationToken = default)
        {
            string path = "/api/v1/account/profile";

            try
            {
                return await OpenApiUtil.RequestAsync<GetProfileResponse>(CreateRequest, authTokenProvider, requestConfig, cancellationToken);
            }
            catch (TaskCanceledException)
            {
                logger.LogInformation("{Method}(): Be canceled.", nameof(GetUserProfileAsync));
                throw;
            }
            catch (Exception ex)
            {
                logger.LogError("{Method}(): Failed. Exception: {Exception}", nameof(GetUserProfileAsync), ex.Message);
                throw;
            }

            HTTPRequest CreateRequest()
            {
                var uri = new Uri(serverBaseUriProvider.BaseUri, path);
                var httpRequest = new HTTPRequest(uri, HTTPMethods.Get);
                httpRequest.DisableCache = true;

                // Bearer authentication required
                httpRequest.AddHeader("Authorization", $"Bearer {authTokenProvider.GetAuthToken()}");

                // Accept Type
                httpRequest.AddHeader("Accept", "application/json");

                return httpRequest;
            }
        }

        public async Task<BaseResponse> PostLoginAsync(RequestConfig requestConfig = null, CancellationToken cancellationToken = default)
        {
            string path = "/api/v1/account/login";

            try
            {
                return await OpenApiUtil.RequestAsync<BaseResponse>(CreateRequest, authTokenProvider, requestConfig, cancellationToken);
            }
            catch (TaskCanceledException)
            {
                logger.LogInformation("{Method}(): Be canceled.", nameof(PostLoginAsync));
                throw;
            }
            catch (Exception ex)
            {
                logger.LogError("{Method}(): Failed. Exception: {Exception}", nameof(PostLoginAsync), ex.Message);
                throw;
            }

            HTTPRequest CreateRequest()
            {
                var uri = new Uri(serverBaseUriProvider.BaseUri, path);
                var httpRequest = new HTTPRequest(uri, HTTPMethods.Post);
                httpRequest.DisableCache = true;

                // Bearer authentication required
                httpRequest.AddHeader("Authorization", $"Bearer {authTokenProvider.GetAuthToken()}");

                // Accept Type
                httpRequest.AddHeader("Accept", "application/json");

                return httpRequest;
            }
        }
    }
}
#pragma warning restore