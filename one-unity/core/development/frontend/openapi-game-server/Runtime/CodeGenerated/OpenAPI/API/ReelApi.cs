/*
 * Server API - Reel
 *
 * The Restful APIs of Reel.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#pragma warning disable
using System;
using System.Collections.Generic;
using System.IO;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using BestHTTP;
using Microsoft.Extensions.Logging;
using Newtonsoft.Json;
using XRSpace.OpenAPI;
using XRSpace.OpenAPI.Utilities;
using VContainer;
using TPFive.OpenApi.GameServer.Model;

namespace TPFive.OpenApi.GameServer
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IReelApi
    {
        /// <summary>
        /// Create reel Create reel.
        /// </summary>
        /// <param name="createReelRequest"></param>
        /// <returns>Task &lt; CreateReelResponse &gt;</returns>
        Task<CreateReelResponse> CreateReelAsync(CreateReelRequest createReelRequest = default, RequestConfig requestConfig = default, CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete one reel Delete one Reel.
        /// </summary>
        /// <param name="reelId">reel id</param>
        /// <returns>Task &lt; BaseResponse &gt;</returns>
        Task<BaseResponse> DeleteReelAsync(string reelId, RequestConfig requestConfig = default, CancellationToken cancellationToken = default);

        /// <summary>
        /// List reels List reels.
        /// </summary>
        /// <param name="size">size of queries times</param>
        /// <param name="offset">offset of items</param>
        /// <param name="xrid">xrid</param>
        /// <param name="reelId">reel_id</param>
        /// <param name="status">status</param>
        /// <returns>Task &lt; ListReelResponse &gt;</returns>
        Task<ListReelResponse> ListReelsAsync(int size, int? offset = default, string xrid = default, string reelId = default, string status = default, RequestConfig requestConfig = default, CancellationToken cancellationToken = default);

        /// <summary>
        /// Publish reel Publish reel.
        /// </summary>
        /// <param name="reelId">reel_id to publish</param>
        /// <returns>Task &lt; BaseResponse &gt;</returns>
        Task<BaseResponse> PublishReelAsync(string reelId, RequestConfig requestConfig = default, CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// Represents a collection of functions to interact with the ReelApi endpoints.
    /// </summary>
    public class ReelApi : IReelApi
    {
        private readonly ILogger logger;
        private readonly IServerBaseUriProvider serverBaseUriProvider;
        private readonly IAuthTokenProvider authTokenProvider;

        /// <summary>
        /// Initializes a new instance of the <see cref="ReelApi"/> class.
        /// </summary>
        /// <param name="loggerFactory"> an instance of ILoggerFactory</param>        
        /// <param name="serverBaseUriProvider"> an instance of IServerBaseUriProvider</param>
        /// <param name="authTokenProvider"> an instance of IAuthTokenProvider</param>
        [Inject]
        public ReelApi(
            ILoggerFactory loggerFactory,
            IServerBaseUriProvider serverBaseUriProvider,
            IAuthTokenProvider authTokenProvider)
        {
            this.logger = loggerFactory.CreateLogger<ReelApi>();
            this.serverBaseUriProvider = serverBaseUriProvider;
            this.authTokenProvider = authTokenProvider;
        }

        public async Task<CreateReelResponse> CreateReelAsync(CreateReelRequest createReelRequest = default, RequestConfig requestConfig = null, CancellationToken cancellationToken = default)
        {
            string path = "/api/v1/reel/create";

            try
            {
                return await OpenApiUtil.RequestAsync<CreateReelResponse>(CreateRequest, authTokenProvider, requestConfig, cancellationToken);
            }
            catch (TaskCanceledException)
            {
                logger.LogInformation("{Method}(): Be canceled.", nameof(CreateReelAsync));
                throw;
            }
            catch (Exception ex)
            {
                logger.LogError("{Method}(): Failed. Exception: {Exception}", nameof(CreateReelAsync), ex.Message);
                throw;
            }

            HTTPRequest CreateRequest()
            {
                var uri = new Uri(serverBaseUriProvider.BaseUri, path);
                var httpRequest = new HTTPRequest(uri, HTTPMethods.Post);
                httpRequest.DisableCache = true;

                // Bearer authentication required
                httpRequest.AddHeader("Authorization", $"Bearer {authTokenProvider.GetAuthToken()}");

                // Content Type
                httpRequest.AddHeader("Content-Type", "application/json");

                // Accept Type
                httpRequest.AddHeader("Accept", "application/json");

                // Body
                if (createReelRequest != null)
                {
                    httpRequest.RawData = Encoding.UTF8.GetBytes(JsonConvert.SerializeObject(createReelRequest));
                }

                return httpRequest;
            }
        }

        public async Task<BaseResponse> DeleteReelAsync(string reelId, RequestConfig requestConfig = null, CancellationToken cancellationToken = default)
        {
            string path = "/api/v1/reel/delete/{reel_id}";

            // Replace the path parameters with their values.
            path = HttpUtil.SetPathParameter(path, "{reel_id}", reelId);

            try
            {
                return await OpenApiUtil.RequestAsync<BaseResponse>(CreateRequest, authTokenProvider, requestConfig, cancellationToken);
            }
            catch (TaskCanceledException)
            {
                logger.LogInformation("{Method}(): Be canceled.", nameof(DeleteReelAsync));
                throw;
            }
            catch (Exception ex)
            {
                logger.LogError("{Method}(): Failed. Exception: {Exception}", nameof(DeleteReelAsync), ex.Message);
                throw;
            }

            HTTPRequest CreateRequest()
            {
                var uri = new Uri(serverBaseUriProvider.BaseUri, path);
                var httpRequest = new HTTPRequest(uri, HTTPMethods.Delete);
                httpRequest.DisableCache = true;

                // Bearer authentication required
                httpRequest.AddHeader("Authorization", $"Bearer {authTokenProvider.GetAuthToken()}");

                // Accept Type
                httpRequest.AddHeader("Accept", "application/json");

                return httpRequest;
            }
        }

        public async Task<ListReelResponse> ListReelsAsync(int size, int? offset = default, string xrid = default, string reelId = default, string status = default, RequestConfig requestConfig = null, CancellationToken cancellationToken = default)
        {
            string path = "/api/v1/reel/list";

            // Build the query string into the path
            var paramMap = new Multimap<string, string>();
            HttpUtil.ParameterToMultiMap("multi", "offset", offset, paramMap);
            HttpUtil.ParameterToMultiMap("multi", "size", size, paramMap);
            HttpUtil.ParameterToMultiMap("multi", "xrid", xrid, paramMap);
            HttpUtil.ParameterToMultiMap("multi", "reel_id", reelId, paramMap);
            HttpUtil.ParameterToMultiMap("multi", "status", status, paramMap);
            path = HttpUtil.SetQueryParameter(path, paramMap);

            try
            {
                return await OpenApiUtil.RequestAsync<ListReelResponse>(CreateRequest, authTokenProvider, requestConfig, cancellationToken);
            }
            catch (TaskCanceledException)
            {
                logger.LogInformation("{Method}(): Be canceled.", nameof(ListReelsAsync));
                throw;
            }
            catch (Exception ex)
            {
                logger.LogError("{Method}(): Failed. Exception: {Exception}", nameof(ListReelsAsync), ex.Message);
                throw;
            }

            HTTPRequest CreateRequest()
            {
                var uri = new Uri(serverBaseUriProvider.BaseUri, path);
                var httpRequest = new HTTPRequest(uri, HTTPMethods.Get);
                httpRequest.DisableCache = true;

                // Bearer authentication required
                httpRequest.AddHeader("Authorization", $"Bearer {authTokenProvider.GetAuthToken()}");

                // Accept Type
                httpRequest.AddHeader("Accept", "application/json");

                return httpRequest;
            }
        }

        public async Task<BaseResponse> PublishReelAsync(string reelId, RequestConfig requestConfig = null, CancellationToken cancellationToken = default)
        {
            string path = "/api/v1/reel/publish/{reel_id}";

            // Replace the path parameters with their values.
            path = HttpUtil.SetPathParameter(path, "{reel_id}", reelId);

            try
            {
                return await OpenApiUtil.RequestAsync<BaseResponse>(CreateRequest, authTokenProvider, requestConfig, cancellationToken);
            }
            catch (TaskCanceledException)
            {
                logger.LogInformation("{Method}(): Be canceled.", nameof(PublishReelAsync));
                throw;
            }
            catch (Exception ex)
            {
                logger.LogError("{Method}(): Failed. Exception: {Exception}", nameof(PublishReelAsync), ex.Message);
                throw;
            }

            HTTPRequest CreateRequest()
            {
                var uri = new Uri(serverBaseUriProvider.BaseUri, path);
                var httpRequest = new HTTPRequest(uri, HTTPMethods.Post);
                httpRequest.DisableCache = true;

                // Bearer authentication required
                httpRequest.AddHeader("Authorization", $"Bearer {authTokenProvider.GetAuthToken()}");

                // Accept Type
                httpRequest.AddHeader("Accept", "application/json");

                return httpRequest;
            }
        }
    }
}
#pragma warning restore