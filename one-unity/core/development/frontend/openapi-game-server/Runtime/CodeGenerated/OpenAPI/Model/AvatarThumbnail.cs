/*
 * Server API - Avatar
 *
 * The Restful APIs of Avatar.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#pragma warning disable
using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace TPFive.OpenApi.GameServer.Model
{
    /// <summary>
    /// Indicates the thumbnail url of each lens of the avatar
    /// </summary>
    public class AvatarThumbnail : IEquatable<AvatarThumbnail>
    {
        /// <summary>
        /// full bady thumbnail url
        /// </summary>
        /// <value>full bady thumbnail url</value>
        [JsonProperty(PropertyName = "full_body")]
        public string FullBody { get; set; }

        /// <summary>
        /// head thumbnail url
        /// </summary>
        /// <value>head thumbnail url</value>
        [JsonProperty(PropertyName = "head")]
        public string Head { get; set; }

        /// <summary>
        /// upper body thumbnail url
        /// </summary>
        /// <value>upper body thumbnail url</value>
        [JsonProperty(PropertyName = "upper_body")]
        public string UpperBody { get; set; }

        public static bool operator ==(AvatarThumbnail left, AvatarThumbnail right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(AvatarThumbnail left, AvatarThumbnail right)
        {
            return !Equals(left, right);
        }

        /// <summary>
        /// Returns the JSON string presentation of the object.
        /// </summary>
        /// <returns>JSON string presentation of the object.</returns>
        public override string ToString()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented, JsonUtils.ToStringJsonSerializerSettings);
        }

        /// <summary>
        /// Returns true if objects are equal.
        /// </summary>
        /// <param name="obj">Object to be compared.</param>
        /// <returns>Boolean.</returns>
        public override bool Equals(object obj)
        {
            if (obj is null)
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            return obj.GetType() == GetType() && Equals((AvatarThumbnail)obj);
        }

        /// <summary>
        /// Returns true if AvatarThumbnail instances are equal.
        /// </summary>
        /// <param name="other">Instance of AvatarThumbnail to be compared.</param>
        /// <returns>Boolean.</returns>
        public bool Equals(AvatarThumbnail other)
        {
            if (other is null)
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            return
                (
                    FullBody == other.FullBody ||
                    FullBody != null &&
                    FullBody.Equals(other.FullBody)
                ) &&
                (
                    Head == other.Head ||
                    Head != null &&
                    Head.Equals(other.Head)
                ) &&
                (
                    UpperBody == other.UpperBody ||
                    UpperBody != null &&
                    UpperBody.Equals(other.UpperBody)
                );
        }

        /// <summary>
        /// Gets the hash code.
        /// </summary>
        /// <returns>Hash code.</returns>
        public override int GetHashCode()
        {
            var hashCode = default(HashCode);

            hashCode.Add(FullBody);
            hashCode.Add(Head);
            hashCode.Add(UpperBody);

            return hashCode.ToHashCode();
        }
    }
}
#pragma warning restore