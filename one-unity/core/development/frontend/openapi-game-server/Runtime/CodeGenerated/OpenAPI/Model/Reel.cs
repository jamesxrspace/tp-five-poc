/*
 * Server API - Reel
 *
 * The Restful APIs of Reel.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#pragma warning disable
using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace TPFive.OpenApi.GameServer.Model
{
    /// <summary>
    /// 
    /// </summary>
    public class Reel : IEquatable<Reel>
    {
        /// <summary>
        /// reel id
        /// </summary>
        /// <value>reel id</value>
        [JsonProperty(PropertyName = "id")]
        public string Id { get; set; }

        /// <summary>
        /// xrid
        /// </summary>
        /// <value>xrid</value>
        [JsonProperty(PropertyName = "xrid")]
        public string Xrid { get; set; }

        /// <summary>
        /// reel description
        /// </summary>
        /// <value>reel description</value>
        [JsonProperty(PropertyName = "description")]
        public string Description { get; set; }

        /// <summary>
        /// reel thumbnail url
        /// </summary>
        /// <value>reel thumbnail url</value>
        [JsonProperty(PropertyName = "thumbnail")]
        public string Thumbnail { get; set; }

        /// <summary>
        /// video url
        /// </summary>
        /// <value>video url</value>
        [JsonProperty(PropertyName = "video")]
        public string Video { get; set; }

        /// <summary>
        /// xrs url
        /// </summary>
        /// <value>xrs url</value>
        [JsonProperty(PropertyName = "xrs")]
        public string Xrs { get; set; }

        /// <summary>
        /// music to motion url
        /// </summary>
        /// <value>music to motion url</value>
        [JsonProperty(PropertyName = "music_to_motion_url")]
        public string MusicToMotionUrl { get; set; }


        /// <summary>
        /// reel status
        /// </summary>
        /// <value>reel status</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum Published for published
            /// </summary>
            [EnumMember(Value = "published")]
            Published = 1,

            /// <summary>
            /// Enum Draft for draft
            /// </summary>
            [EnumMember(Value = "draft")]
            Draft = 2,

            /// <summary>
            /// Enum Deleted for deleted
            /// </summary>
            [EnumMember(Value = "deleted")]
            Deleted = 3,
        }
        /// <summary>
        /// reel status
        /// </summary>
        /// <value>reel status</value>
        [JsonProperty(PropertyName = "status")]
        public StatusEnum Status { get; set; }

        /// <summary>
        /// Gets or Sets JoinMode
        /// </summary>
        [JsonProperty(PropertyName = "join_mode")]
        public JoinModeEnum JoinMode { get; set; }

        /// <summary>
        /// parent reel ids
        /// </summary>
        /// <value>parent reel ids</value>
        [JsonProperty(PropertyName = "parent_reel_ids")]
        public List<string> ParentReelIds { get; set; }

        /// <summary>
        /// root reel id
        /// </summary>
        /// <value>root reel id</value>
        [JsonProperty(PropertyName = "root_reel_id")]
        public string RootReelId { get; set; }

        /// <summary>
        /// reel created time
        /// </summary>
        /// <value>reel created time</value>
        [JsonProperty(PropertyName = "created_at")]
        public string CreatedAt { get; set; }

        /// <summary>
        /// reel updated time
        /// </summary>
        /// <value>reel updated time</value>
        [JsonProperty(PropertyName = "updated_at")]
        public string UpdatedAt { get; set; }

        public static bool operator ==(Reel left, Reel right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Reel left, Reel right)
        {
            return !Equals(left, right);
        }

        /// <summary>
        /// Returns the JSON string presentation of the object.
        /// </summary>
        /// <returns>JSON string presentation of the object.</returns>
        public override string ToString()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented, JsonUtils.ToStringJsonSerializerSettings);
        }

        /// <summary>
        /// Returns true if objects are equal.
        /// </summary>
        /// <param name="obj">Object to be compared.</param>
        /// <returns>Boolean.</returns>
        public override bool Equals(object obj)
        {
            if (obj is null)
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            return obj.GetType() == GetType() && Equals((Reel)obj);
        }

        /// <summary>
        /// Returns true if Reel instances are equal.
        /// </summary>
        /// <param name="other">Instance of Reel to be compared.</param>
        /// <returns>Boolean.</returns>
        public bool Equals(Reel other)
        {
            if (other is null)
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            return
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) &&
                (
                    Xrid == other.Xrid ||
                    Xrid != null &&
                    Xrid.Equals(other.Xrid)
                ) &&
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) &&
                (
                    Thumbnail == other.Thumbnail ||
                    Thumbnail != null &&
                    Thumbnail.Equals(other.Thumbnail)
                ) &&
                (
                    Video == other.Video ||
                    Video != null &&
                    Video.Equals(other.Video)
                ) &&
                (
                    Xrs == other.Xrs ||
                    Xrs != null &&
                    Xrs.Equals(other.Xrs)
                ) &&
                (
                    MusicToMotionUrl == other.MusicToMotionUrl ||
                    MusicToMotionUrl != null &&
                    MusicToMotionUrl.Equals(other.MusicToMotionUrl)
                ) &&
                (
                    Status == other.Status ||
                    
                    Status.Equals(other.Status)
                ) &&
                (
                    JoinMode == other.JoinMode ||
                    
                    JoinMode.Equals(other.JoinMode)
                ) &&
                (
                    ParentReelIds == other.ParentReelIds ||
                    ParentReelIds != null &&
                    other.ParentReelIds != null &&
                    ParentReelIds.SequenceEqual(other.ParentReelIds)
                ) && 
                (
                    RootReelId == other.RootReelId ||
                    RootReelId != null &&
                    RootReelId.Equals(other.RootReelId)
                ) &&
                (
                    CreatedAt == other.CreatedAt ||
                    CreatedAt != null &&
                    CreatedAt.Equals(other.CreatedAt)
                ) &&
                (
                    UpdatedAt == other.UpdatedAt ||
                    UpdatedAt != null &&
                    UpdatedAt.Equals(other.UpdatedAt)
                );
        }

        /// <summary>
        /// Gets the hash code.
        /// </summary>
        /// <returns>Hash code.</returns>
        public override int GetHashCode()
        {
            var hashCode = default(HashCode);

            hashCode.Add(Id);
            hashCode.Add(Xrid);
            hashCode.Add(Description);
            hashCode.Add(Thumbnail);
            hashCode.Add(Video);
            hashCode.Add(Xrs);
            hashCode.Add(MusicToMotionUrl);
            hashCode.Add(Status);
            hashCode.Add(JoinMode);
            hashCode.Add(ParentReelIds);
            hashCode.Add(RootReelId);
            hashCode.Add(CreatedAt);
            hashCode.Add(UpdatedAt);

            return hashCode.ToHashCode();
        }
    }
}
#pragma warning restore