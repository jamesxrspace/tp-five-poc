using System.Collections.Generic;
using System.Text;

namespace TPFive.SCG.ServiceEco.CodeGen.ServiceProviderManagement
{
    internal static class CodeGenerator
    {
        public static string Generate(
            ClassModel model,
            string fullEnumName)
        {
            var output = $@"
// <auto-generated />

using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using Cysharp.Threading.Tasks;

namespace {model.Namespace}
{{
    /// <summary>
    /// </summary>
    {model.Modifier} class {model.Name} :
        IServiceProviderManagement
    {{
        private readonly Dictionary<int, TPFive.Game.IServiceProvider> _serviceProviderTable =
            new Dictionary<int, TPFive.Game.IServiceProvider>();

        public TPFive.Game.IServiceProvider GetNullServiceProvider {{ get; }}

        public async Task AddServiceProvider(int priority, TPFive.Game.IServiceProvider serviceProvider)
        {{
            _serviceProviderTable.TryAdd(priority, serviceProvider);
        }}

        public async Task RemoveServiceProvider(int priority)
        {{
            var contained = _serviceProviderTable.ContainsKey(priority);
            if (contained)
            {{
                _serviceProviderTable.Remove(priority);
            }}
        }}

        private IServiceProvider GetServiceProvider(int index)
        {{
            var sp = _serviceProviderTable[(int){fullEnumName}] as IServiceProvider;
            var result = _serviceProviderTable.TryGetValue(index, out var desiredServiceProvider);
            if (result)
            {{
                if (desiredServiceProvider is IServiceProvider serviceProvider)
                {{
                    sp = serviceProvider;
                }}
            }}

            return sp;
        }}
    }}
}}
";

            return output;
        }
    }
}
