using System.Collections.Generic;
using System.Linq;

namespace TPFive.SCG.AsyncStartable.CodeGen
{
    /// <summary>
    /// Actual code generation.
    /// </summary>
    internal static class CodeGenerator
    {
        public static string Generate(
            ClassModel model,
            string setupBeginMethodName,
            string setupEndMethodName,
            IReadOnlyList<(string ExceptionType, string ExceptionHandler)> exceptionHandlerList)
        {
            var output = $@"
// <auto-generated />

using System.Threading;
using System.Threading.Tasks;
using Cysharp.Threading.Tasks;
using VContainer.Unity;

namespace {model.Namespace}
{{
    /// <summary>
    /// This part deals setup in async manner.
    /// </summary>
    {model.Modifier} class {model.Name} :
        IAsyncStartable
    {{
        /// <summary>
        /// Cancellation token source.
        /// </summary>
        private CancellationTokenSource _cancellationTokenSource = default;
";
            if (exceptionHandlerList.Any())
            {
                // Create exception handler
                foreach (var (exceptionType, exceptionHandler) in exceptionHandlerList)
                {
                    var code = $@"
        /// <summary>
        /// Define exception handler for {exceptionType}.
        /// </summary>
        private System.Func<{exceptionType}, CancellationToken, Task> _func{exceptionHandler} = default;
";
                    output = $"{output}{code}";
                }
            }

            var beginMethod = $@"
        public async UniTask StartAsync(CancellationToken cancellationToken)
        {{
            _cancellationTokenSource = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken);
            var success = false;
            try
            {{
                cancellationToken.ThrowIfCancellationRequested();
                await {setupBeginMethodName}(cancellationToken);
                success = true;
            }}
";
            output = $"{output}{beginMethod}";

            if (exceptionHandlerList.Any())
            {
                foreach (var (exceptionType, exceptionHandler) in exceptionHandlerList)
                {
                    var code = $@"
            // Catch exception for {exceptionType}
            catch ({exceptionType} e)
            {{
                // Check if exception handler is defined, called if defined.
                if (_func{exceptionHandler} != null)
                {{
                    await _func{exceptionHandler}.Invoke(e, cancellationToken);
                }}
            }}
";
                    output = $"{output}{code}";
                }
            }

            var endMethod = $@"
            finally
            {{
                // Call end method and pass success flag.
                await {setupEndMethodName}(success, cancellationToken);
            }}
        }}
    }}
}}
";
            output = $"{output}{endMethod}";

            return output;
        }
    }
}
