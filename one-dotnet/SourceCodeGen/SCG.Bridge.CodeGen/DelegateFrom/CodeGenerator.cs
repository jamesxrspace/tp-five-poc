using System.Collections.Generic;
using Microsoft.CodeAnalysis.CSharp.Syntax;

namespace TPFive.SCG.Bridge.CodeGen
{
    internal static class CodeGenerator
    {
        private const string DelegateSuffix = "Delegate";

        public static string Generate(
            ClassModel model,
            List<(MethodDeclarationSyntax, string)> combinedMethodSyntaxList)
        {
            var output = $@"
// <auto-generated />

using System.Collections;
using UnityEngine;
using UnityEngine.SceneManagement;

namespace TPFive.Cross
{{
    /// <summary>
    /// This is from {model.Namespace} {model.Name}.
    /// </summary>
    public sealed partial class Bridge
    {{
";
            foreach (var (methodSyntax, handlerName) in combinedMethodSyntaxList)
            {
                var connectParams = string.Empty;
                foreach (var parameterSyntax in methodSyntax.ParameterList.Parameters)
                {
                    var paramWithType = $@"
            {parameterSyntax.Type.ToString()} {parameterSyntax.Identifier.Text},
";
                    connectParams = $"{connectParams}{paramWithType}";
                }

                if (!string.IsNullOrEmpty(connectParams))
                {
                    connectParams = connectParams.TrimEnd(',', '\n', '\r');
                }

                var code = $@"
        public delegate {methodSyntax.ReturnType.ToString()} {handlerName}{DelegateSuffix}({connectParams});

        /// <summary>
        /// Define handler for {handlerName}.
        /// </summary>
        public static {handlerName}{DelegateSuffix} {handlerName};
";
                output = $"{output}{code}";
            }

            var endMethod = $@"
    }}
}}
";
            output = $"{output}{endMethod}";

            return output;
        }
    }
}
