using System.Diagnostics;
using System.Reflection;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;

namespace TPFive.SCG.ServiceEco.CodeGen.Tests;

using TPFive.SCG.ServiceEco.Abstractions;
using TPFive.SCG.ServiceEco.CodeGen.ServiceProviderManagement;

public class ServiceProviderManagementTest
{
    [SetUp]
    public void Setup()
    {
    }

    private static Compilation CreateCompilation(string source)
    {
        var references = AppDomain.CurrentDomain
            .GetAssemblies()
            .Where(_ => !_.IsDynamic && !string.IsNullOrWhiteSpace(_.Location))
            .Select(_ => MetadataReference.CreateFromFile(_.Location))
            .Concat(new[]
            {
                // add your app/lib specifics, e.g.:
                MetadataReference.CreateFromFile(typeof(ServiceProviderManagementAttribute).GetTypeInfo().Assembly.Location)
            })
            .ToList();

        return CSharpCompilation.Create(
            "compilation",
            new[] { CSharpSyntaxTree.ParseText(source) },
            references,
            new CSharpCompilationOptions(OutputKind.ConsoleApplication));
    }

    [Test]
    public void DefaultUsage()
    {
        var code = @"
namespace TPFive.SCG.ServiceEco.CodeGen.Tests
{
    using TPFive.SCG.ServiceEco.Abstractions;

    [ServiceProviderManagement]
    public sealed partial class Service
    {
    }
}
";
        var inputCompilation = CreateCompilation(code);

        var generator = new SourceGenerator();
        var driver = CSharpGeneratorDriver.Create(generator);
        driver = (CSharpGeneratorDriver) driver.RunGeneratorsAndUpdateCompilation(inputCompilation, out var outputCompilation, out var diagnostics);
        var runResult = driver.GetRunResult();
        var generatedSource = runResult.Results[0].GeneratedSources[0].SourceText.ToString();

        var generatedCode = @"
// <auto-generated />

using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using Cysharp.Threading.Tasks;

namespace TPFive.SCG.ServiceEco.CodeGen.Tests
{
    /// <summary>
    /// </summary>
    public sealed partial class Service :
        IServiceProviderManagement
    {
        private readonly Dictionary<int, TPFive.Game.IServiceProvider> _serviceProviderTable =
            new Dictionary<int, TPFive.Game.IServiceProvider>();

        public TPFive.Game.IServiceProvider GetNullServiceProvider { get; }

        public async Task AddServiceProvider(int priority, TPFive.Game.IServiceProvider serviceProvider)
        {
            _serviceProviderTable.TryAdd(priority, serviceProvider);
        }

        public async Task RemoveServiceProvider(int priority)
        {
            var contained = _serviceProviderTable.ContainsKey(priority);
            if (contained)
            {
                _serviceProviderTable.Remove(priority);
            }
        }

        private IServiceProvider GetServiceProvider(int index)
        {
            var sp = _serviceProviderTable[(int)TPFive.Game.ServiceProviderKind.NullServiceProvider] as IServiceProvider;
            var result = _serviceProviderTable.TryGetValue(index, out var desiredServiceProvider);
            if (result)
            {
                if (desiredServiceProvider is IServiceProvider serviceProvider)
                {
                    sp = serviceProvider;
                }
            }

            return sp;
        }
    }
}
";

        Assert.IsTrue(generatedSource.Contains(generatedCode));
    }
    
    [Test]
    public void ChangeFullEnumName()
    {
        var code = @"
namespace TPFive.SCG.ServiceEco.CodeGen.Tests
{
    using TPFive.SCG.ServiceEco.Abstractions;

    [ServiceProviderManagement(NullServiceProviderEnumName = ""TPFive.Game.MyEnum.NullValue"")
    public sealed partial class Service
    {
    }
}
";
        var inputCompilation = CreateCompilation(code);

        var generator = new SourceGenerator();
        var driver = CSharpGeneratorDriver.Create(generator);
        driver = (CSharpGeneratorDriver) driver.RunGeneratorsAndUpdateCompilation(inputCompilation, out var outputCompilation, out var diagnostics);
        var runResult = driver.GetRunResult();
        var generatedSource = runResult.Results[0].GeneratedSources[0].SourceText.ToString();

        var generatedCode = @"
// <auto-generated />

using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using Cysharp.Threading.Tasks;

namespace TPFive.SCG.ServiceEco.CodeGen.Tests
{
    /// <summary>
    /// </summary>
    public sealed partial class Service :
        IServiceProviderManagement
    {
        private readonly Dictionary<int, TPFive.Game.IServiceProvider> _serviceProviderTable =
            new Dictionary<int, TPFive.Game.IServiceProvider>();

        public TPFive.Game.IServiceProvider GetNullServiceProvider { get; }

        public async Task AddServiceProvider(int priority, TPFive.Game.IServiceProvider serviceProvider)
        {
            _serviceProviderTable.TryAdd(priority, serviceProvider);
        }

        public async Task RemoveServiceProvider(int priority)
        {
            var contained = _serviceProviderTable.ContainsKey(priority);
            if (contained)
            {
                _serviceProviderTable.Remove(priority);
            }
        }

        private IServiceProvider GetServiceProvider(int index)
        {
            var sp = _serviceProviderTable[(int)TPFive.Game.MyEnum.NullValue] as IServiceProvider;
            var result = _serviceProviderTable.TryGetValue(index, out var desiredServiceProvider);
            if (result)
            {
                if (desiredServiceProvider is IServiceProvider serviceProvider)
                {
                    sp = serviceProvider;
                }
            }

            return sp;
        }
    }
}
";

        Assert.IsTrue(generatedSource.Contains(generatedCode));
    }
}