using System.Diagnostics;
using System.Reflection;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;

namespace TPFive.SCG.ServiceEco.CodeGen.Tests;

using TPFive.SCG.ServiceEco.Abstractions;
using TPFive.SCG.ServiceEco.CodeGen.RegisterToContainer;

public class RegisterToContainerTest
{
    [SetUp]
    public void Setup()
    {
    }

    private static Compilation CreateCompilation(string source)
    {
        var references = AppDomain.CurrentDomain
            .GetAssemblies()
            .Where(_ => !_.IsDynamic && !string.IsNullOrWhiteSpace(_.Location))
            .Select(_ => MetadataReference.CreateFromFile(_.Location))
            .Concat(new[]
            {
                // add your app/lib specifics, e.g.:
                MetadataReference.CreateFromFile(typeof(RegisterServiceAttribute).GetTypeInfo().Assembly.Location)
            })
            .ToList();

        return CSharpCompilation.Create(
            "compilation",
            new[] { CSharpSyntaxTree.ParseText(source) },
            references,
            new CSharpCompilationOptions(OutputKind.ConsoleApplication));
    }

    [Test]
    public void DefaultUsage()
    {
        var code = @"
namespace TPFive.SCG.ServiceEco.CodeGen.Tests
{
    using TPFive.SCG.ServiceEco.Abstractions;

    [RegisterToContainer]
    public sealed partial class LifetimeScope
    {
    }
}
";
        var inputCompilation = CreateCompilation(code);

        var generator = new SourceGenerator();
        var driver = CSharpGeneratorDriver.Create(generator);
        driver = (CSharpGeneratorDriver) driver.RunGeneratorsAndUpdateCompilation(inputCompilation, out var outputCompilation, out var diagnostics);
        var runResult = driver.GetRunResult();
        var generatedSource = runResult.Results[0].GeneratedSources[0].SourceText.ToString();

        var generatedCode = @"
// <auto-generated />

using MessagePipe;
using VContainer;
using VContainer.Unity;

namespace TPFive.SCG.ServiceEco.CodeGen.Tests
{
    /// <summary>
    /// This part deals with installing the service to the container.
    /// </summary>
    public class Installer :
        IInstaller
    {
        /// <summary>
        /// The options for the message pipe.
        /// </summary>
        private readonly MessagePipeOptions _messagePipeOptions;

        public Installer(MessagePipeOptions messagePipeOptions)
        {
            _messagePipeOptions = messagePipeOptions;
        }

        /// <summary>
        /// Install the service to the container.
        /// </summary>
        public void Install(IContainerBuilder builder)
        {
            // Register references related to service.
            builder.Register<Service>(Lifetime.Singleton).As<IService>();

            // Register references related to message.
        }
    }
}
";

        Assert.IsTrue(generatedSource.Contains(generatedCode));
    }
}
