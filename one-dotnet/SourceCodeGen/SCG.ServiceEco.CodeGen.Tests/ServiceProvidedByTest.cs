using System.Diagnostics;
using System.Reflection;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;

namespace TPFive.SCG.ServiceEco.CodeGen.Tests;

using TPFive.SCG.ServiceEco.Abstractions;
using TPFive.SCG.ServiceEco.CodeGen.ServiceProvidedBy;

// This test is not working, not know how to fix it at this time.
public class ServiceProvidedByTest
{
    [SetUp]
    public void Setup()
    {

    }

    private static Compilation CreateCompilation(string source)
    {
        var references = AppDomain.CurrentDomain
            .GetAssemblies()
            .Where(_ => !_.IsDynamic && !string.IsNullOrWhiteSpace(_.Location))
            .Select(_ => MetadataReference.CreateFromFile(_.Location))
            .Concat(new[]
            {
                // add your app/lib specifics, e.g.:
                MetadataReference.CreateFromFile(typeof(ServiceProvidedByAttribute).GetTypeInfo().Assembly.Location)
            })
            .ToList();

        return CSharpCompilation.Create(
            "compilation",
            new[] { CSharpSyntaxTree.ParseText(source) },
            references,
            new CSharpCompilationOptions(OutputKind.ConsoleApplication));
    }

    [Test]
    public void DefaultUsage()
    {
        var code = @"
namespace TPFive.SCG.ServiceEco.CodeGen.Tests
{
    using TPFive.SCG.ServiceEco.Abstractions;

    public interface IServiceProvider
    {
        void PlaySound(string name);
    }

    [ServiceProvidedBy(typeof(IServiceProvider))]
    public sealed partial class Service
    {
    }
}
";
        var inputCompilation = CreateCompilation(code);

        var generator = new SourceGenerator();
        var driver = CSharpGeneratorDriver.Create(generator);
        driver = (CSharpGeneratorDriver)driver.RunGeneratorsAndUpdateCompilation(inputCompilation, out var outputCompilation, out var diagnostics);
        var runResult = driver.GetRunResult();
        var generatedSource = runResult.Results[0].GeneratedSources[0].SourceText.ToString();

        var generatedCode = @"
// <auto-generated />

using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using Cysharp.Threading.Tasks;
using UnityEngine;
using UnityEngine.SceneManagement;
using VContainer;
using VContainer.Unity;

namespace TPFive.SCG.ServiceEco.CodeGen.Tests
{
    /// <summary>
    /// This is the default service provider for related service.
    /// </summary>
    public class NullServiceProvider :
        TPFive.SCG.ServiceEco.CodeGen.Tests.IServiceProvider
    {
        /// <summary>
        /// Action with multiple parameters.
        /// </summary>
        private readonly T1MultiObjParamDelegate<string> _actionHandler;

        public NullServiceProvider(
            T1MultiObjParamDelegate<string> actionHandler)
        {
            _actionHandler = actionHandler;
        }
        public void PlaySound(string name) 
        {
            _actionHandler?.Invoke(""{MethodName} - {Name}"", nameof(PlaySound), name);
        }
    }
}
";

        Assert.IsTrue(generatedSource.Contains(generatedCode));
    }

    [Test]
    public void AddTemplateParameterUsage()
    {
        var code = @"
namespace TPFive.SCG.ServiceEco.CodeGen.Tests
{
    using TPFive.SCG.ServiceEco.Abstractions;

    public interface IServiceProvider
    {
        void PlaySound<T>(T name) where T : IDisposable
    }

    [ServiceProvidedBy(typeof(IServiceProvider))]
    public sealed partial class Service
    {
    }
}
";
        var inputCompilation = CreateCompilation(code);

        var generator = new SourceGenerator();
        var driver = CSharpGeneratorDriver.Create(generator);
        driver = (CSharpGeneratorDriver)driver.RunGeneratorsAndUpdateCompilation(inputCompilation, out var outputCompilation, out var diagnostics);
        var runResult = driver.GetRunResult();
        var generatedSource = runResult.Results[0].GeneratedSources[0].SourceText.ToString();

        var generatedCode = @"
// <auto-generated />

using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using Cysharp.Threading.Tasks;
using UnityEngine;
using UnityEngine.SceneManagement;
using VContainer;
using VContainer.Unity;

namespace TPFive.SCG.ServiceEco.CodeGen.Tests
{
    /// <summary>
    /// This is the default service provider for related service.
    /// </summary>
    public class NullServiceProvider :
        TPFive.SCG.ServiceEco.CodeGen.Tests.IServiceProvider
    {
        /// <summary>
        /// Action with multiple parameters.
        /// </summary>
        private readonly T1MultiObjParamDelegate<string> _actionHandler;

        public NullServiceProvider(
            T1MultiObjParamDelegate<string> actionHandler)
        {
            _actionHandler = actionHandler;
        }
        public void PlaySound<T>(T name) where T : IDisposable
        {
            _actionHandler?.Invoke(""{MethodName} - {Name}"", nameof(PlaySound), name);
        }
    }
}
";

        Assert.IsTrue(generatedSource.Contains(generatedCode));
    }

    [Test]
    public void AddPropertyGetUsage()
    {
        var code = @"
namespace TPFive.SCG.ServiceEco.CodeGen.Tests
{
    using TPFive.SCG.ServiceEco.Abstractions;

    public interface IServiceProvider
    {
        bool IsMute { get; }

        void PlaySound(string name);
    }

    [ServiceProvidedBy(typeof(IServiceProvider))]
    public sealed partial class Service
    {
    }
}
";
        var inputCompilation = CreateCompilation(code);

        var generator = new SourceGenerator();
        var driver = CSharpGeneratorDriver.Create(generator);
        driver = (CSharpGeneratorDriver)driver.RunGeneratorsAndUpdateCompilation(inputCompilation, out var outputCompilation, out var diagnostics);
        var runResult = driver.GetRunResult();
        var generatedSource = runResult.Results[0].GeneratedSources[0].SourceText.ToString();

        var generatedCode = @"
// <auto-generated />

using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using Cysharp.Threading.Tasks;
using UnityEngine;
using UnityEngine.SceneManagement;
using VContainer;
using VContainer.Unity;

namespace TPFive.SCG.ServiceEco.CodeGen.Tests
{
    /// <summary>
    /// This is the default service provider for related service.
    /// </summary>
    public class NullServiceProvider :
        TPFive.SCG.ServiceEco.CodeGen.Tests.IServiceProvider
    {
        /// <summary>
        /// Action with multiple parameters.
        /// </summary>
        private readonly T1MultiObjParamDelegate<string> _actionHandler;

        public NullServiceProvider(
            T1MultiObjParamDelegate<string> actionHandler)
        {
            _actionHandler = actionHandler;
        }

        public bool IsMute
        {
            get
            {
                _actionHandler?.Invoke(""{PropertyName} - get"", nameof(IsMute));
                return default(bool);
            }
        }

        public void PlaySound(string name) 
        {
            _actionHandler?.Invoke(""{MethodName} - {Name}"", nameof(PlaySound), name);
        }
    }
}
";

        Assert.IsTrue(generatedSource.Contains(generatedCode));
    }

    [Test]
    public void AddPropertySetUsage()
    {
        var code = @"
namespace TPFive.SCG.ServiceEco.CodeGen.Tests
{
    using TPFive.SCG.ServiceEco.Abstractions;

    public interface IServiceProvider
    {
        bool IsMute { set; }

        void PlaySound(string name);
    }

    [ServiceProvidedBy(typeof(IServiceProvider))]
    public sealed partial class Service
    {
    }
}
";
        var inputCompilation = CreateCompilation(code);

        var generator = new SourceGenerator();
        var driver = CSharpGeneratorDriver.Create(generator);
        driver = (CSharpGeneratorDriver)driver.RunGeneratorsAndUpdateCompilation(inputCompilation, out var outputCompilation, out var diagnostics);
        var runResult = driver.GetRunResult();
        var generatedSource = runResult.Results[0].GeneratedSources[0].SourceText.ToString();

        var generatedCode = @"
// <auto-generated />

using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using Cysharp.Threading.Tasks;
using UnityEngine;
using UnityEngine.SceneManagement;
using VContainer;
using VContainer.Unity;

namespace TPFive.SCG.ServiceEco.CodeGen.Tests
{
    /// <summary>
    /// This is the default service provider for related service.
    /// </summary>
    public class NullServiceProvider :
        TPFive.SCG.ServiceEco.CodeGen.Tests.IServiceProvider
    {
        /// <summary>
        /// Action with multiple parameters.
        /// </summary>
        private readonly T1MultiObjParamDelegate<string> _actionHandler;

        public NullServiceProvider(
            T1MultiObjParamDelegate<string> actionHandler)
        {
            _actionHandler = actionHandler;
        }

        public bool IsMute
        {
            set
            {
                _actionHandler?.Invoke(""{PropertyName} - set"", nameof(IsMute));
            }
        }

        public void PlaySound(string name) 
        {
            _actionHandler?.Invoke(""{MethodName} - {Name}"", nameof(PlaySound), name);
        }
    }
}
";

        Assert.IsTrue(generatedSource.Contains(generatedCode));
    }

    [Test]
    public void AddPropertyGetSetUsage()
    {
        var code = @"
namespace TPFive.SCG.ServiceEco.CodeGen.Tests
{
    using TPFive.SCG.ServiceEco.Abstractions;

    public interface IServiceProvider
    {
        bool IsMute { get; set; }

        void PlaySound(string name);
    }

    [ServiceProvidedBy(typeof(IServiceProvider))]
    public sealed partial class Service
    {
    }
}
";
        var inputCompilation = CreateCompilation(code);

        var generator = new SourceGenerator();
        var driver = CSharpGeneratorDriver.Create(generator);
        driver = (CSharpGeneratorDriver)driver.RunGeneratorsAndUpdateCompilation(inputCompilation, out var outputCompilation, out var diagnostics);
        var runResult = driver.GetRunResult();
        var generatedSource = runResult.Results[0].GeneratedSources[0].SourceText.ToString();

        var generatedCode = @"
// <auto-generated />

using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using Cysharp.Threading.Tasks;
using UnityEngine;
using UnityEngine.SceneManagement;
using VContainer;
using VContainer.Unity;

namespace TPFive.SCG.ServiceEco.CodeGen.Tests
{
    /// <summary>
    /// This is the default service provider for related service.
    /// </summary>
    public class NullServiceProvider :
        TPFive.SCG.ServiceEco.CodeGen.Tests.IServiceProvider
    {
        /// <summary>
        /// Action with multiple parameters.
        /// </summary>
        private readonly T1MultiObjParamDelegate<string> _actionHandler;

        public NullServiceProvider(
            T1MultiObjParamDelegate<string> actionHandler)
        {
            _actionHandler = actionHandler;
        }

        public bool IsMute
        {
            get
            {
                _actionHandler?.Invoke(""{PropertyName} - get"", nameof(IsMute));
                return default(bool);
            }
            set
            {
                _actionHandler?.Invoke(""{PropertyName} - set"", nameof(IsMute));
            }
        }

        public void PlaySound(string name) 
        {
            _actionHandler?.Invoke(""{MethodName} - {Name}"", nameof(PlaySound), name);
        }
    }
}
";

        Assert.IsTrue(generatedSource.Contains(generatedCode));
    }

    [Test]
    public void AddPropertySetGetUsage()
    {
        var code = @"
namespace TPFive.SCG.ServiceEco.CodeGen.Tests
{
    using TPFive.SCG.ServiceEco.Abstractions;

    public interface IServiceProvider
    {
        bool IsMute { set; get; }

        void PlaySound(string name);
    }

    [ServiceProvidedBy(typeof(IServiceProvider))]
    public sealed partial class Service
    {
    }
}
";
        var inputCompilation = CreateCompilation(code);

        var generator = new SourceGenerator();
        var driver = CSharpGeneratorDriver.Create(generator);
        driver = (CSharpGeneratorDriver)driver.RunGeneratorsAndUpdateCompilation(inputCompilation, out var outputCompilation, out var diagnostics);
        var runResult = driver.GetRunResult();
        var generatedSource = runResult.Results[0].GeneratedSources[0].SourceText.ToString();

        var generatedCode = @"
// <auto-generated />

using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using Cysharp.Threading.Tasks;
using UnityEngine;
using UnityEngine.SceneManagement;
using VContainer;
using VContainer.Unity;

namespace TPFive.SCG.ServiceEco.CodeGen.Tests
{
    /// <summary>
    /// This is the default service provider for related service.
    /// </summary>
    public class NullServiceProvider :
        TPFive.SCG.ServiceEco.CodeGen.Tests.IServiceProvider
    {
        /// <summary>
        /// Action with multiple parameters.
        /// </summary>
        private readonly T1MultiObjParamDelegate<string> _actionHandler;

        public NullServiceProvider(
            T1MultiObjParamDelegate<string> actionHandler)
        {
            _actionHandler = actionHandler;
        }

        public bool IsMute
        {
            set
            {
                _actionHandler?.Invoke(""{PropertyName} - set"", nameof(IsMute));
            }
            get
            {
                _actionHandler?.Invoke(""{PropertyName} - get"", nameof(IsMute));
                return default(bool);
            }
        }

        public void PlaySound(string name) 
        {
            _actionHandler?.Invoke(""{MethodName} - {Name}"", nameof(PlaySound), name);
        }
    }
}
";

        Assert.IsTrue(generatedSource.Contains(generatedCode));
    }

    [Test]
    public void AddPropertyGetSetWithNamespaceUsage()
    {
        var code = @"
namespace TPFive.SCG.ServiceEco.CodeGen.Tests
{
    using TPFive.SCG.ServiceEco.Abstractions;

    public interface IServiceProvider
    {
        System.Text.RegularExpressions.Regex IsMatch { get; set; }

        void PlaySound(string name);
    }

    [ServiceProvidedBy(typeof(IServiceProvider))]
    public sealed partial class Service
    {
    }
}
";
        var inputCompilation = CreateCompilation(code);

        var generator = new SourceGenerator();
        var driver = CSharpGeneratorDriver.Create(generator);
        driver = (CSharpGeneratorDriver)driver.RunGeneratorsAndUpdateCompilation(inputCompilation, out var outputCompilation, out var diagnostics);
        var runResult = driver.GetRunResult();
        var generatedSource = runResult.Results[0].GeneratedSources[0].SourceText.ToString();

        var generatedCode = @"
// <auto-generated />

using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using Cysharp.Threading.Tasks;
using UnityEngine;
using UnityEngine.SceneManagement;
using VContainer;
using VContainer.Unity;

namespace TPFive.SCG.ServiceEco.CodeGen.Tests
{
    /// <summary>
    /// This is the default service provider for related service.
    /// </summary>
    public class NullServiceProvider :
        TPFive.SCG.ServiceEco.CodeGen.Tests.IServiceProvider
    {
        /// <summary>
        /// Action with multiple parameters.
        /// </summary>
        private readonly T1MultiObjParamDelegate<string> _actionHandler;

        public NullServiceProvider(
            T1MultiObjParamDelegate<string> actionHandler)
        {
            _actionHandler = actionHandler;
        }

        public System.Text.RegularExpressions.Regex IsMatch
        {
            get
            {
                _actionHandler?.Invoke(""{PropertyName} - get"", nameof(IsMatch));
                return default(System.Text.RegularExpressions.Regex);
            }
            set
            {
                _actionHandler?.Invoke(""{PropertyName} - set"", nameof(IsMatch));
            }
        }

        public void PlaySound(string name) 
        {
            _actionHandler?.Invoke(""{MethodName} - {Name}"", nameof(PlaySound), name);
        }
    }
}
";

        Assert.IsTrue(generatedSource.Contains(generatedCode));
    }

    [Test]
    public void MethodParameterHaveOutParameterModifier()
    {
var code = @"
namespace TPFive.SCG.ServiceEco.CodeGen.Tests
{
    using TPFive.SCG.ServiceEco.Abstractions;

    public interface IServiceProvider
    {
        bool TryGetVolume(string parameter, out float volume);
    }

    [ServiceProvidedBy(typeof(IServiceProvider))]
    public sealed partial class Service
    {
    }
}
";
        var inputCompilation = CreateCompilation(code);

        var generator = new SourceGenerator();
        var driver = CSharpGeneratorDriver.Create(generator);
        driver = (CSharpGeneratorDriver)driver.RunGeneratorsAndUpdateCompilation(inputCompilation, out var outputCompilation, out var diagnostics);
        var runResult = driver.GetRunResult();
        var generatedSource = runResult.Results[0].GeneratedSources[0].SourceText.ToString();

        var generatedCode = @"
// <auto-generated />

using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using Cysharp.Threading.Tasks;
using UnityEngine;
using UnityEngine.SceneManagement;
using VContainer;
using VContainer.Unity;

namespace TPFive.SCG.ServiceEco.CodeGen.Tests
{
    /// <summary>
    /// This is the default service provider for related service.
    /// </summary>
    public class NullServiceProvider :
        TPFive.SCG.ServiceEco.CodeGen.Tests.IServiceProvider
    {
        /// <summary>
        /// Action with multiple parameters.
        /// </summary>
        private readonly T1MultiObjParamDelegate<string> _actionHandler;

        public NullServiceProvider(
            T1MultiObjParamDelegate<string> actionHandler)
        {
            _actionHandler = actionHandler;
        }
        public bool TryGetVolume(string parameter, out float volume) 
        {
            volume = default;
            _actionHandler?.Invoke(""{MethodName} - {Parameter} - {Volume}"", nameof(TryGetVolume), parameter, volume);
            return default;
        }
    }
}
";

        Assert.IsTrue(generatedSource.Contains(generatedCode));
    }
}
