plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
}

android {
    namespace 'com.xrspace.xrauth.test'
    compileSdk 33

    defaultConfig {
        minSdk 23
        targetSdk 33
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    buildFeatures {
        viewBinding true
    }
    lint {
        baseline file("lint-baseline.xml")
    }
}

dependencies {
    implementation 'com.google.android.material:material:1.9.0'
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'

    implementation project(path: ':xrauth')
}

tasks.named('build').configure {
    dependsOn 'createTestEnvResourcesFile'
}

tasks.register("createTestEnvResourcesFile") {
    def whichGit = 'which git'.execute().text.trim()
    def projectRoot = "$whichGit rev-parse --show-toplevel".execute().text.trim().replace("\\", "/")
    def envFolder = "$projectRoot/one-unity/unity-project/development/complete-unity"
    def envFile = file("$envFolder/.env")
    def resourceFile = file('src/main/res/values/test_env.xml')

    doLast {
        Properties props = new Properties()
        props.load(new FileInputStream(envFile))
        def root = new Node(null, "resources")
        props.each { key, value ->
            root.appendNode('string', [name: key], value)
        }
        // write the xml to the xmlFile
        def writer = new StringWriter()
        new XmlNodePrinter(new PrintWriter(writer)).print(root)
        resourceFile.text = writer.toString()
    }
}
