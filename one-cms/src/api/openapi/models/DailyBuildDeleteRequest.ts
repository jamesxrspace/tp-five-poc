/* tslint:disable */
/* eslint-disable */
/**
 * Server API - Login
 * The Restful APIs of Login.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 *
 * @export
 * @interface DailyBuildDeleteRequest
 */
export interface DailyBuildDeleteRequest {
  /**
   * Key of the daily build to delete
   * @type {string}
   * @memberof DailyBuildDeleteRequest
   */
  key?: string;
  /**
   * Date of the daily build to delete (in date-time format)
   * @type {Date}
   * @memberof DailyBuildDeleteRequest
   */
  date?: Date;
  /**
   * Type of the daily build (apk or vr-apk)
   * @type {string}
   * @memberof DailyBuildDeleteRequest
   */
  buildType?: DailyBuildDeleteRequestBuildTypeEnum;
}

/**
 * @export
 */
export const DailyBuildDeleteRequestBuildTypeEnum = {
  Apk: 'apk',
  VrApk: 'vr-apk',
} as const;
export type DailyBuildDeleteRequestBuildTypeEnum =
  (typeof DailyBuildDeleteRequestBuildTypeEnum)[keyof typeof DailyBuildDeleteRequestBuildTypeEnum];

/**
 * Check if a given object implements the DailyBuildDeleteRequest interface.
 */
export function instanceOfDailyBuildDeleteRequest(value: object): boolean {
  let isInstance = true;

  return isInstance;
}

export function DailyBuildDeleteRequestFromJSON(json: any): DailyBuildDeleteRequest {
  return DailyBuildDeleteRequestFromJSONTyped(json, false);
}

export function DailyBuildDeleteRequestFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): DailyBuildDeleteRequest {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    key: !exists(json, 'key') ? undefined : json['key'],
    date: !exists(json, 'date') ? undefined : new Date(json['date']),
    buildType: !exists(json, 'build_type') ? undefined : json['build_type'],
  };
}

export function DailyBuildDeleteRequestToJSON(value?: DailyBuildDeleteRequest | null): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    key: value.key,
    date: value.date === undefined ? undefined : value.date.toISOString(),
    build_type: value.buildType,
  };
}
