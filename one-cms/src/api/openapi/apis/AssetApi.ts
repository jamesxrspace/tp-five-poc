/* tslint:disable */
/* eslint-disable */
/**
 * Server API - Login
 * The Restful APIs of Login.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import type {
  AssetListResponse,
  ConfirmUploadedResponse,
  CreateUploadRequest,
  CreateUploadRequestResponse,
} from '../models/index';
import {
  AssetListResponseFromJSON,
  AssetListResponseToJSON,
  ConfirmUploadedResponseFromJSON,
  ConfirmUploadedResponseToJSON,
  CreateUploadRequestFromJSON,
  CreateUploadRequestToJSON,
  CreateUploadRequestResponseFromJSON,
  CreateUploadRequestResponseToJSON,
} from '../models/index';

export interface ConfirmUploadedRequest {
  requestId: string;
}

export interface CreateUploadRequestRequest {
  createUploadRequest?: CreateUploadRequest;
}

export interface GetAssetItemsRequest {
  size: number;
  type: GetAssetItemsTypeEnum;
  offset?: number;
}

/**
 *
 */
export class AssetApi extends runtime.BaseAPI {
  /**
   * Confirm files uploaded to s3.
   * Confirm files uploaded to s3
   */
  async confirmUploadedRaw(
    requestParameters: ConfirmUploadedRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<ConfirmUploadedResponse>> {
    if (requestParameters.requestId === null || requestParameters.requestId === undefined) {
      throw new runtime.RequiredError(
        'requestId',
        'Required parameter requestParameters.requestId was null or undefined when calling confirmUploaded.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('BearerAuth', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/api/v1/asset/uploaded/{request_id}`.replace(
          `{${'request_id'}}`,
          encodeURIComponent(String(requestParameters.requestId)),
        ),
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ConfirmUploadedResponseFromJSON(jsonValue),
    );
  }

  /**
   * Confirm files uploaded to s3.
   * Confirm files uploaded to s3
   */
  async confirmUploaded(
    requestParameters: ConfirmUploadedRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<ConfirmUploadedResponse> {
    const response = await this.confirmUploadedRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Create upload request.
   * Create upload request
   */
  async createUploadRequestRaw(
    requestParameters: CreateUploadRequestRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<CreateUploadRequestResponse>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('BearerAuth', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/api/v1/asset/upload`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: CreateUploadRequestToJSON(requestParameters.createUploadRequest),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      CreateUploadRequestResponseFromJSON(jsonValue),
    );
  }

  /**
   * Create upload request.
   * Create upload request
   */
  async createUploadRequest(
    requestParameters: CreateUploadRequestRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<CreateUploadRequestResponse> {
    const response = await this.createUploadRequestRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Get asset items by type. This API endpoint allows you to retrieve a list of asset items based on their type. The response includes pagination information and a list of asset items.
   * Get asset items by type
   */
  async getAssetItemsRaw(
    requestParameters: GetAssetItemsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<AssetListResponse>> {
    if (requestParameters.size === null || requestParameters.size === undefined) {
      throw new runtime.RequiredError(
        'size',
        'Required parameter requestParameters.size was null or undefined when calling getAssetItems.',
      );
    }

    if (requestParameters.type === null || requestParameters.type === undefined) {
      throw new runtime.RequiredError(
        'type',
        'Required parameter requestParameters.type was null or undefined when calling getAssetItems.',
      );
    }

    const queryParameters: any = {};

    if (requestParameters.offset !== undefined) {
      queryParameters['offset'] = requestParameters.offset;
    }

    if (requestParameters.size !== undefined) {
      queryParameters['size'] = requestParameters.size;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('BearerAuth', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/api/v1/asset/{type}/list`.replace(
          `{${'type'}}`,
          encodeURIComponent(String(requestParameters.type)),
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      AssetListResponseFromJSON(jsonValue),
    );
  }

  /**
   * Get asset items by type. This API endpoint allows you to retrieve a list of asset items based on their type. The response includes pagination information and a list of asset items.
   * Get asset items by type
   */
  async getAssetItems(
    requestParameters: GetAssetItemsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<AssetListResponse> {
    const response = await this.getAssetItemsRaw(requestParameters, initOverrides);
    return await response.value();
  }
}

/**
 * @export
 */
export const GetAssetItemsTypeEnum = {
  Decoration: 'decoration',
} as const;
export type GetAssetItemsTypeEnum =
  (typeof GetAssetItemsTypeEnum)[keyof typeof GetAssetItemsTypeEnum];
