/* tslint:disable */
/* eslint-disable */
/**
 * Server API - Login
 * The Restful APIs of Login.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import type {
  BaseResponse,
  CreateSpaceGroupRequest,
  CreateSpaceGroupResponse,
  GetSpaceGroupListResponse,
  UpdateSpaceGroupRequest,
  UpdateSpaceGroupResponse,
} from '../models/index';
import {
  BaseResponseFromJSON,
  BaseResponseToJSON,
  CreateSpaceGroupRequestFromJSON,
  CreateSpaceGroupRequestToJSON,
  CreateSpaceGroupResponseFromJSON,
  CreateSpaceGroupResponseToJSON,
  GetSpaceGroupListResponseFromJSON,
  GetSpaceGroupListResponseToJSON,
  UpdateSpaceGroupRequestFromJSON,
  UpdateSpaceGroupRequestToJSON,
  UpdateSpaceGroupResponseFromJSON,
  UpdateSpaceGroupResponseToJSON,
} from '../models/index';

export interface CreateSpaceGroupOperationRequest {
  createSpaceGroupRequest?: CreateSpaceGroupRequest;
}

export interface DeleteSpaceGroupRequest {
  spaceGroupId: string;
}

export interface GetSpaceGroupListRequest {
  offset: number;
  size: number;
}

export interface UpdateSpaceGroupOperationRequest {
  spaceGroupId: string;
  updateSpaceGroupRequest?: UpdateSpaceGroupRequest;
}

/**
 *
 */
export class SpaceGroupApi extends runtime.BaseAPI {
  /**
   * Create space group
   */
  async createSpaceGroupRaw(
    requestParameters: CreateSpaceGroupOperationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<CreateSpaceGroupResponse>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('BearerAuth', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/_cms/v1/space/group`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: CreateSpaceGroupRequestToJSON(requestParameters.createSpaceGroupRequest),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      CreateSpaceGroupResponseFromJSON(jsonValue),
    );
  }

  /**
   * Create space group
   */
  async createSpaceGroup(
    requestParameters: CreateSpaceGroupOperationRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<CreateSpaceGroupResponse> {
    const response = await this.createSpaceGroupRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Delete space group
   */
  async deleteSpaceGroupRaw(
    requestParameters: DeleteSpaceGroupRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<BaseResponse>> {
    if (requestParameters.spaceGroupId === null || requestParameters.spaceGroupId === undefined) {
      throw new runtime.RequiredError(
        'spaceGroupId',
        'Required parameter requestParameters.spaceGroupId was null or undefined when calling deleteSpaceGroup.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('BearerAuth', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/_cms/v1/space/group/{space_group_id}`.replace(
          `{${'space_group_id'}}`,
          encodeURIComponent(String(requestParameters.spaceGroupId)),
        ),
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseFromJSON(jsonValue));
  }

  /**
   * Delete space group
   */
  async deleteSpaceGroup(
    requestParameters: DeleteSpaceGroupRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<BaseResponse> {
    const response = await this.deleteSpaceGroupRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Get the list of available space groups
   */
  async getSpaceGroupListRaw(
    requestParameters: GetSpaceGroupListRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<GetSpaceGroupListResponse>> {
    if (requestParameters.offset === null || requestParameters.offset === undefined) {
      throw new runtime.RequiredError(
        'offset',
        'Required parameter requestParameters.offset was null or undefined when calling getSpaceGroupList.',
      );
    }

    if (requestParameters.size === null || requestParameters.size === undefined) {
      throw new runtime.RequiredError(
        'size',
        'Required parameter requestParameters.size was null or undefined when calling getSpaceGroupList.',
      );
    }

    const queryParameters: any = {};

    if (requestParameters.offset !== undefined) {
      queryParameters['offset'] = requestParameters.offset;
    }

    if (requestParameters.size !== undefined) {
      queryParameters['size'] = requestParameters.size;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('BearerAuth', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/_cms/v1/space/group/list`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      GetSpaceGroupListResponseFromJSON(jsonValue),
    );
  }

  /**
   * Get the list of available space groups
   */
  async getSpaceGroupList(
    requestParameters: GetSpaceGroupListRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<GetSpaceGroupListResponse> {
    const response = await this.getSpaceGroupListRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Update space group info
   */
  async updateSpaceGroupRaw(
    requestParameters: UpdateSpaceGroupOperationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<UpdateSpaceGroupResponse>> {
    if (requestParameters.spaceGroupId === null || requestParameters.spaceGroupId === undefined) {
      throw new runtime.RequiredError(
        'spaceGroupId',
        'Required parameter requestParameters.spaceGroupId was null or undefined when calling updateSpaceGroup.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('BearerAuth', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/_cms/v1/space/group/{space_group_id}`.replace(
          `{${'space_group_id'}}`,
          encodeURIComponent(String(requestParameters.spaceGroupId)),
        ),
        method: 'PUT',
        headers: headerParameters,
        query: queryParameters,
        body: UpdateSpaceGroupRequestToJSON(requestParameters.updateSpaceGroupRequest),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      UpdateSpaceGroupResponseFromJSON(jsonValue),
    );
  }

  /**
   * Update space group info
   */
  async updateSpaceGroup(
    requestParameters: UpdateSpaceGroupOperationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<UpdateSpaceGroupResponse> {
    const response = await this.updateSpaceGroupRaw(requestParameters, initOverrides);
    return await response.value();
  }
}
