/* tslint:disable */
/* eslint-disable */
/**
 * Server API - Login
 * The Restful APIs of Login.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import type { DeleteDailyBuildListResponse, GetDailyBuildListResponse } from '../models/index';
import {
  DeleteDailyBuildListResponseFromJSON,
  DeleteDailyBuildListResponseToJSON,
  GetDailyBuildListResponseFromJSON,
  GetDailyBuildListResponseToJSON,
} from '../models/index';

export interface DailyBuildDeleteRequest {
  filePath: string;
}

export interface DailyBuildListRequest {
  offset: number;
  size: number;
  buildTypes?: Array<DailyBuildListBuildTypesEnum>;
}

/**
 *
 */
export class DailyBuildApi extends runtime.BaseAPI {
  /**
   * Delete a specific daily build
   */
  async dailyBuildDeleteRaw(
    requestParameters: DailyBuildDeleteRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<DeleteDailyBuildListResponse>> {
    if (requestParameters.filePath === null || requestParameters.filePath === undefined) {
      throw new runtime.RequiredError(
        'filePath',
        'Required parameter requestParameters.filePath was null or undefined when calling dailyBuildDelete.',
      );
    }

    const queryParameters: any = {};

    if (requestParameters.filePath !== undefined) {
      queryParameters['file_path'] = requestParameters.filePath;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('BearerAuth', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/_cms/v1/daily_build/delete`,
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      DeleteDailyBuildListResponseFromJSON(jsonValue),
    );
  }

  /**
   * Delete a specific daily build
   */
  async dailyBuildDelete(
    requestParameters: DailyBuildDeleteRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<DeleteDailyBuildListResponse> {
    const response = await this.dailyBuildDeleteRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Get the list of available daily build
   */
  async dailyBuildListRaw(
    requestParameters: DailyBuildListRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<GetDailyBuildListResponse>> {
    if (requestParameters.offset === null || requestParameters.offset === undefined) {
      throw new runtime.RequiredError(
        'offset',
        'Required parameter requestParameters.offset was null or undefined when calling dailyBuildList.',
      );
    }

    if (requestParameters.size === null || requestParameters.size === undefined) {
      throw new runtime.RequiredError(
        'size',
        'Required parameter requestParameters.size was null or undefined when calling dailyBuildList.',
      );
    }

    const queryParameters: any = {};

    if (requestParameters.offset !== undefined) {
      queryParameters['offset'] = requestParameters.offset;
    }

    if (requestParameters.size !== undefined) {
      queryParameters['size'] = requestParameters.size;
    }

    if (requestParameters.buildTypes) {
      queryParameters['build_types'] = requestParameters.buildTypes;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('BearerAuth', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/_cms/v1/daily_build/list`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      GetDailyBuildListResponseFromJSON(jsonValue),
    );
  }

  /**
   * Get the list of available daily build
   */
  async dailyBuildList(
    requestParameters: DailyBuildListRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<GetDailyBuildListResponse> {
    const response = await this.dailyBuildListRaw(requestParameters, initOverrides);
    return await response.value();
  }
}

/**
 * @export
 */
export const DailyBuildListBuildTypesEnum = {
  Apk: 'apk',
  VrApk: 'vr-apk',
} as const;
export type DailyBuildListBuildTypesEnum =
  (typeof DailyBuildListBuildTypesEnum)[keyof typeof DailyBuildListBuildTypesEnum];
