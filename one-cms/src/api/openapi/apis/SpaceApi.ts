/* tslint:disable */
/* eslint-disable */
/**
 * Server API - Login
 * The Restful APIs of Login.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import type {
  BaseResponse,
  CreateSpaceBody,
  CreateSpaceResponse,
  GetSpaceListResponse,
  UpdateSpaceBody,
  UpdateSpaceResponse,
} from '../models/index';
import {
  BaseResponseFromJSON,
  BaseResponseToJSON,
  CreateSpaceBodyFromJSON,
  CreateSpaceBodyToJSON,
  CreateSpaceResponseFromJSON,
  CreateSpaceResponseToJSON,
  GetSpaceListResponseFromJSON,
  GetSpaceListResponseToJSON,
  UpdateSpaceBodyFromJSON,
  UpdateSpaceBodyToJSON,
  UpdateSpaceResponseFromJSON,
  UpdateSpaceResponseToJSON,
} from '../models/index';

export interface CreateSpaceRequest {
  createSpaceBody?: CreateSpaceBody;
}

export interface DeleteSpaceRequest {
  spaceId: string;
}

export interface GetSpaceListRequest {
  offset: number;
  size: number;
  spaceGroupId?: string;
}

export interface UpdateSpaceRequest {
  spaceId: string;
  updateSpaceBody?: UpdateSpaceBody;
}

/**
 *
 */
export class SpaceApi extends runtime.BaseAPI {
  /**
   * Create space
   */
  async createSpaceRaw(
    requestParameters: CreateSpaceRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<CreateSpaceResponse>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('BearerAuth', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/_cms/v1/space`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: CreateSpaceBodyToJSON(requestParameters.createSpaceBody),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      CreateSpaceResponseFromJSON(jsonValue),
    );
  }

  /**
   * Create space
   */
  async createSpace(
    requestParameters: CreateSpaceRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<CreateSpaceResponse> {
    const response = await this.createSpaceRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Delete space
   */
  async deleteSpaceRaw(
    requestParameters: DeleteSpaceRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<BaseResponse>> {
    if (requestParameters.spaceId === null || requestParameters.spaceId === undefined) {
      throw new runtime.RequiredError(
        'spaceId',
        'Required parameter requestParameters.spaceId was null or undefined when calling deleteSpace.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('BearerAuth', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/_cms/v1/space/{space_id}`.replace(
          `{${'space_id'}}`,
          encodeURIComponent(String(requestParameters.spaceId)),
        ),
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseFromJSON(jsonValue));
  }

  /**
   * Delete space
   */
  async deleteSpace(
    requestParameters: DeleteSpaceRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<BaseResponse> {
    const response = await this.deleteSpaceRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Get the list of available space
   */
  async getSpaceListRaw(
    requestParameters: GetSpaceListRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<GetSpaceListResponse>> {
    if (requestParameters.offset === null || requestParameters.offset === undefined) {
      throw new runtime.RequiredError(
        'offset',
        'Required parameter requestParameters.offset was null or undefined when calling getSpaceList.',
      );
    }

    if (requestParameters.size === null || requestParameters.size === undefined) {
      throw new runtime.RequiredError(
        'size',
        'Required parameter requestParameters.size was null or undefined when calling getSpaceList.',
      );
    }

    const queryParameters: any = {};

    if (requestParameters.offset !== undefined) {
      queryParameters['offset'] = requestParameters.offset;
    }

    if (requestParameters.size !== undefined) {
      queryParameters['size'] = requestParameters.size;
    }

    if (requestParameters.spaceGroupId !== undefined) {
      queryParameters['space_group_id'] = requestParameters.spaceGroupId;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('BearerAuth', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/_cms/v1/space/list`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      GetSpaceListResponseFromJSON(jsonValue),
    );
  }

  /**
   * Get the list of available space
   */
  async getSpaceList(
    requestParameters: GetSpaceListRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<GetSpaceListResponse> {
    const response = await this.getSpaceListRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Update space
   */
  async updateSpaceRaw(
    requestParameters: UpdateSpaceRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<UpdateSpaceResponse>> {
    if (requestParameters.spaceId === null || requestParameters.spaceId === undefined) {
      throw new runtime.RequiredError(
        'spaceId',
        'Required parameter requestParameters.spaceId was null or undefined when calling updateSpace.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('BearerAuth', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/_cms/v1/space/{space_id}`.replace(
          `{${'space_id'}}`,
          encodeURIComponent(String(requestParameters.spaceId)),
        ),
        method: 'PUT',
        headers: headerParameters,
        query: queryParameters,
        body: UpdateSpaceBodyToJSON(requestParameters.updateSpaceBody),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      UpdateSpaceResponseFromJSON(jsonValue),
    );
  }

  /**
   * Update space
   */
  async updateSpace(
    requestParameters: UpdateSpaceRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<UpdateSpaceResponse> {
    const response = await this.updateSpaceRaw(requestParameters, initOverrides);
    return await response.value();
  }
}
