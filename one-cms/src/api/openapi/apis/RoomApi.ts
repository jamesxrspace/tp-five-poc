/* tslint:disable */
/* eslint-disable */
/**
 * Server API - Login
 * The Restful APIs of Login.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import type { RoomListResponse } from '../models/index';
import { RoomListResponseFromJSON, RoomListResponseToJSON } from '../models/index';

export interface GetRoomListRequest {
  spaceId: string;
  offset: number;
  size: number;
}

/**
 *
 */
export class RoomApi extends runtime.BaseAPI {
  /**
   * Get the list of room by space id
   */
  async getRoomListRaw(
    requestParameters: GetRoomListRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<RoomListResponse>> {
    if (requestParameters.spaceId === null || requestParameters.spaceId === undefined) {
      throw new runtime.RequiredError(
        'spaceId',
        'Required parameter requestParameters.spaceId was null or undefined when calling getRoomList.',
      );
    }

    if (requestParameters.offset === null || requestParameters.offset === undefined) {
      throw new runtime.RequiredError(
        'offset',
        'Required parameter requestParameters.offset was null or undefined when calling getRoomList.',
      );
    }

    if (requestParameters.size === null || requestParameters.size === undefined) {
      throw new runtime.RequiredError(
        'size',
        'Required parameter requestParameters.size was null or undefined when calling getRoomList.',
      );
    }

    const queryParameters: any = {};

    if (requestParameters.spaceId !== undefined) {
      queryParameters['space_id'] = requestParameters.spaceId;
    }

    if (requestParameters.offset !== undefined) {
      queryParameters['offset'] = requestParameters.offset;
    }

    if (requestParameters.size !== undefined) {
      queryParameters['size'] = requestParameters.size;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('BearerAuth', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/_cms/v1/room/list`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      RoomListResponseFromJSON(jsonValue),
    );
  }

  /**
   * Get the list of room by space id
   */
  async getRoomList(
    requestParameters: GetRoomListRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<RoomListResponse> {
    const response = await this.getRoomListRaw(requestParameters, initOverrides);
    return await response.value();
  }
}
