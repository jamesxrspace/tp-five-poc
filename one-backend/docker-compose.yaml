version: '3.9'

services:
  # ======== third-party services ========
  mongodb:
    image: mongo:6.0.9
    restart: on-failure:5
    entrypoint: |
      bash -c "
        openssl rand -base64 444 > /tmp/mongodb.key
        chmod 400 /tmp/mongodb.key
        chown 999:999 /tmp/mongodb.key

        exec /usr/local/bin/docker-entrypoint.sh mongod $@
      "
    command: mongod --bind_ip_all --replSet dbrs --keyFile /tmp/mongodb.key
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
    ports:
      - 27017:27017
    volumes:
      - ${PWD}/.data/mongodb:/data/db
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 10s
      start_period: 5s
      timeout: 5s
      retries: 5
  mongodb-replica-init:
    image: mongo:6.0.9
    depends_on:
      mongodb:
        condition: service_healthy
    entrypoint: |
      mongosh mongodb://mongodb:27017 -u root -p example --eval '
        rs.initiate(
          {
            _id: "dbrs",
            version: 1,
            members: [
              { _id: 0, host: "mongodb:27017" }
            ]
          }
        )
        rs.status()
      '

  mongo-express:
    image: mongo-express
    restart: on-failure:5
    environment:
      ME_CONFIG_MONGODB_SERVER: mongodb
      ME_CONFIG_MONGODB_PORT: 27017
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: example
    ports:
      - 8081:8081
    depends_on:
      mongodb:
        condition: service_healthy

  # only uncomment if you need other AWS service.
  # localstack:
  #   # Persistence is a LocalStack Pro feature that can save and restore the state of LocalStack.
  #   image: localstack/localstack:2.2.0
  #   ports:
  #     - 4566:4566

  minio:
    image: minio/minio:latest
    command: minio server /data --console-address ":9090"
    environment:
      - MINIO_ROOT_USER=minio
      - MINIO_ROOT_PASSWORD=minioadmin
    ports:
      - 9000:9000
      - 9090:9090
    volumes:
      - ${PWD}/.data/minio:/data

  mc:
    image: minio/mc:latest
    depends_on:
      - minio
    environment:
      - AWS_KEY
      - AWS_SECRET
      - DEFAULT_BUCKET
      - INTERMEDIATE_BUCKET
    entrypoint: |
      /bin/sh -c "
        mc alias set minio http://minio:9000 minio minioadmin
        mc admin user svcacct add minio minio --access-key ${AWS_KEY} --secret-key ${AWS_SECRET}
        mc mb --ignore-existing minio/${DEFAULT_BUCKET}
        mc mb --ignore-existing minio/${INTERMEDIATE_BUCKET}
        mc mb --ignore-existing minio/${APK_BUILD_BUCKET}
        mc anonymous set download minio/${DEFAULT_BUCKET}
        mc anonymous set download minio/${INTERMEDIATE_BUCKET}
        mc anonymous set download minio/${APK_BUILD_BUCKET}
        mc cp /motion_data/*.bin minio/${DEFAULT_BUCKET}/music_to_motion/output/
      "
    volumes:
      - ${PWD}/motion_data:/motion_data:ro

  redis:
    # in-memory storage key-value storage
    image: redis:7.0.12
    ports:
      - 6379:6379

networks:
  default:
    name: tp-five
    driver: bridge
